// generated by Fast Light User Interface Designer (fluid) version 1.0009

#include "liVesselsModelGUI.h"

inline void VesselsModelGUI::cb_xExternalOffsetAdjuster_i(Fl_Adjuster* o, void*) {
  xExternalOffsetValueOutput->value( o->value() );
UpdateExternalOffset();
}
void VesselsModelGUI::cb_xExternalOffsetAdjuster(Fl_Adjuster* o, void* v) {
  ((VesselsModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_xExternalOffsetAdjuster_i(o,v);
}

inline void VesselsModelGUI::cb_yExternalOffsetAdjuster_i(Fl_Adjuster* o, void*) {
  yExternalOffsetValueOutput->value( o->value() );
UpdateExternalOffset();
}
void VesselsModelGUI::cb_yExternalOffsetAdjuster(Fl_Adjuster* o, void* v) {
  ((VesselsModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_yExternalOffsetAdjuster_i(o,v);
}

inline void VesselsModelGUI::cb_zExternalOffsetAdjuster_i(Fl_Adjuster* o, void*) {
  zExternalOffsetValueOutput->value( o->value() );
UpdateExternalOffset();
}
void VesselsModelGUI::cb_zExternalOffsetAdjuster(Fl_Adjuster* o, void* v) {
  ((VesselsModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_zExternalOffsetAdjuster_i(o,v);
}

inline void VesselsModelGUI::cb_None_i(Fl_Menu_*, void*) {
  m_Vessels->SetDrawingMode( li::Shape3D::none );
m_Vessels->InvokeEvent( li::VesselsChangedEvent );
}
void VesselsModelGUI::cb_None(Fl_Menu_* o, void* v) {
  ((VesselsModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_None_i(o,v);
}

inline void VesselsModelGUI::cb_Points_i(Fl_Menu_*, void*) {
  m_Vessels->SetDrawingMode( li::Shape3D::points );
m_Vessels->InvokeEvent( li::VesselsChangedEvent );
}
void VesselsModelGUI::cb_Points(Fl_Menu_* o, void* v) {
  ((VesselsModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Points_i(o,v);
}

inline void VesselsModelGUI::cb_Lines_i(Fl_Menu_*, void*) {
  m_Vessels->SetDrawingMode( li::Shape3D::lines );
m_Vessels->InvokeEvent( li::VesselsChangedEvent );
}
void VesselsModelGUI::cb_Lines(Fl_Menu_* o, void* v) {
  ((VesselsModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Lines_i(o,v);
}

inline void VesselsModelGUI::cb_Triangles_i(Fl_Menu_*, void*) {
  m_Vessels->SetDrawingMode( li::Shape3D::triangles );
m_Vessels->InvokeEvent( li::VesselsChangedEvent );
}
void VesselsModelGUI::cb_Triangles(Fl_Menu_* o, void* v) {
  ((VesselsModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Triangles_i(o,v);
}

inline void VesselsModelGUI::cb_SurfacePoints_i(Fl_Menu_*, void*) {
  m_Vessels->SetDrawingMode( li::Shape3D::surfacepoints );
m_Vessels->InvokeEvent( li::VesselsChangedEvent );
}
void VesselsModelGUI::cb_SurfacePoints(Fl_Menu_* o, void* v) {
  ((VesselsModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_SurfacePoints_i(o,v);
}

Fl_Menu_Item VesselsModelGUI::menu_Draw[] = {
 {"None", 0,  (Fl_Callback*)VesselsModelGUI::cb_None, 0, 0, 0, 0, 14, 0},
 {"Points", 0,  (Fl_Callback*)VesselsModelGUI::cb_Points, 0, 0, 0, 0, 14, 0},
 {"Lines", 0,  (Fl_Callback*)VesselsModelGUI::cb_Lines, 0, 0, 0, 0, 14, 0},
 {"Triangles", 0,  (Fl_Callback*)VesselsModelGUI::cb_Triangles, 0, 0, 0, 0, 14, 0},
 {"SurfacePoints", 0,  (Fl_Callback*)VesselsModelGUI::cb_SurfacePoints, 0, 0, 0, 0, 14, 0},
 {0}
};

inline void VesselsModelGUI::cb_displayClusterCheckButton_i(Fl_Check_Button*, void*) {
  SetDisplayPointSet();
}
void VesselsModelGUI::cb_displayClusterCheckButton(Fl_Check_Button* o, void* v) {
  ((VesselsModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_displayClusterCheckButton_i(o,v);
}

inline void VesselsModelGUI::cb_Registration_i(Fl_Button*, void*) {
  ShowRegistrationControl();
}
void VesselsModelGUI::cb_Registration(Fl_Button* o, void* v) {
  ((VesselsModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Registration_i(o,v);
}

VesselsModelGUI::VesselsModelGUI() {
  Fl_Window* w;
  m_Vessels = li::VectorTubes3D::New();
m_Registrator = li::VesselsRegistrator::New();
m_OptimizerGUI.SetOptimizer( m_Registrator->GetRegistrator()->GetOptimizer() );
  { Fl_Window* o = controlWindow = new Fl_Window(304, 200, "Vessels");
    w = o;
    o->user_data((void*)(this));
    { Fl_Tabs* o = new Fl_Tabs(10, 15, 280, 175);
      { Fl_Group* o = new Fl_Group(10, 40, 280, 150, "External Offset");
        o->align(129);
        xExternalOffsetValueOutput = new Fl_Value_Output(205, 65, 65, 25);
        yExternalOffsetValueOutput = new Fl_Value_Output(205, 92, 65, 25);
        zExternalOffsetValueOutput = new Fl_Value_Output(205, 119, 65, 25);
        { Fl_Adjuster* o = xExternalOffsetAdjuster = new Fl_Adjuster(65, 65, 135, 25, "X : ");
          o->minimum(-500);
          o->maximum(500);
          o->step(0.01);
          o->callback((Fl_Callback*)cb_xExternalOffsetAdjuster);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Adjuster* o = yExternalOffsetAdjuster = new Fl_Adjuster(65, 92, 135, 25, "Y : ");
          o->minimum(-500);
          o->maximum(500);
          o->step(0.01);
          o->callback((Fl_Callback*)cb_yExternalOffsetAdjuster);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Adjuster* o = zExternalOffsetAdjuster = new Fl_Adjuster(65, 119, 135, 25, "Z : ");
          o->minimum(-500);
          o->maximum(500);
          o->step(0.01);
          o->callback((Fl_Callback*)cb_zExternalOffsetAdjuster);
          o->align(FL_ALIGN_LEFT);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(10, 40, 280, 150, "Internal Offset");
        o->hide();
        xInternalOffsetValueOutput = new Fl_Value_Output(205, 65, 65, 25);
        yInternalOffsetValueOutput = new Fl_Value_Output(205, 92, 65, 25);
        zInternalOffsetValueOutput = new Fl_Value_Output(205, 119, 65, 25);
        { Fl_Adjuster* o = xInternalOffsetAdjuster = new Fl_Adjuster(65, 65, 135, 25, "X : ");
          o->minimum(-500);
          o->maximum(500);
          o->step(0.01);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Adjuster* o = yInternalOffsetAdjuster = new Fl_Adjuster(65, 92, 135, 25, "Y : ");
          o->minimum(-500);
          o->maximum(500);
          o->step(0.01);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Adjuster* o = zInternalOffsetAdjuster = new Fl_Adjuster(65, 119, 135, 25, "Z : ");
          o->minimum(-500);
          o->maximum(500);
          o->step(0.01);
          o->align(FL_ALIGN_LEFT);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(10, 40, 280, 150, "Display");
        o->hide();
        { Fl_Choice* o = new Fl_Choice(140, 65, 100, 25, "Draw Mode : ");
          o->menu(menu_Draw);
        }
        { Fl_Check_Button* o = displayClusterCheckButton = new Fl_Check_Button(80, 101, 155, 29, "  Display Cluster");
          o->box(FL_ENGRAVED_FRAME);
          o->down_box(FL_DIAMOND_DOWN_BOX);
          o->selection_color(2);
          o->callback((Fl_Callback*)cb_displayClusterCheckButton);
        }
        { Fl_Button* o = new Fl_Button(80, 140, 155, 25, "Registration");
          o->callback((Fl_Callback*)cb_Registration);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(10, 40, 280, 150, "Browse");
        o->hide();
        { Fl_Scroll* o = new Fl_Scroll(25, 50, 255, 125);
          o->box(FL_DOWN_BOX);
          { Fl_Tile* o = new Fl_Tile(25, 50, 255, 125);
            o->end();
          }
          o->end();
        }
        o->end();
      }
      o->end();
    }
    o->end();
  }
}

VesselsModelGUI::~VesselsModelGUI() {
}

void VesselsModelGUI::Show(void) {
  controlWindow->show();
}

void VesselsModelGUI::Hide(void) {
  controlWindow->hide();
}

void VesselsModelGUI::SetExternalOffset(double x,double y,double z) {
  xExternalOffsetValueOutput->value( x );
yExternalOffsetValueOutput->value( y );
zExternalOffsetValueOutput->value( z );
xExternalOffsetAdjuster->value( x );
yExternalOffsetAdjuster->value( y );
zExternalOffsetAdjuster->value( z );
}

void VesselsModelGUI::SetInternalOffset(double x,double y,double z) {
  xInternalOffsetValueOutput->value( x );
yInternalOffsetValueOutput->value( y );
zInternalOffsetValueOutput->value( z );
xInternalOffsetAdjuster->value( x );
yInternalOffsetAdjuster->value( y );
zInternalOffsetAdjuster->value( z );
}

void VesselsModelGUI::SetVesselsModel(li::VectorTubes3D * vessels ) {
  m_Vessels = vessels;
li::Tube3D::VectorType offset = m_Vessels->GetExternalOffset();
SetExternalOffset( offset[0], offset[1], offset[2] );
m_Registrator->SetVessels( m_Vessels );
}

void VesselsModelGUI::UpdateExternalOffset(void) {
  li::Tube3D::VectorType offset;
offset[0] = xExternalOffsetAdjuster->value();
offset[1] = yExternalOffsetAdjuster->value();
offset[2] = zExternalOffsetAdjuster->value();
m_Vessels->SetExternalOffset( offset );
m_Vessels->InvokeEvent( li::VesselsChangedEvent );
}

void VesselsModelGUI::SetDisplayPointSet(void) {
  if( displayClusterCheckButton->value() )
{
  m_Vessels->SetDisplayPointSet( true );
}
else
{
  m_Vessels->SetDisplayPointSet( false );
}

m_Vessels->InvokeEvent( li::VesselsChangedEvent );
}

void VesselsModelGUI::ShowRegistrationControl(void) {
  m_OptimizerGUI.Show();
}

void VesselsModelGUI::SetImage( li::VesselsRegistrator::FluoroscopicImageType * image ) {
  m_Registrator->SetImage( image );
}

li::VesselsRegistrator::Pointer VesselsModelGUI::GetRegistrator(void) {
  return m_Registrator;
}

void VesselsModelGUI::GeneratePointSet(void) {
}
