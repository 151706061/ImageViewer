// generated by Fast Light User Interface Designer (fluid) version 1.0010

#include "liSurgeryTableGUI.h"

inline void SurgeryTableGUI::cb_heightAdjuster_i(Fl_Adjuster* o, void*) {
  heightValueOutput->value( o->value() );
m_Table->SetVertical( o->value() );
}
void SurgeryTableGUI::cb_heightAdjuster(Fl_Adjuster* o, void* v) {
  ((SurgeryTableGUI*)(o->parent()->user_data()))->cb_heightAdjuster_i(o,v);
}

inline void SurgeryTableGUI::cb_lateralAdjuster_i(Fl_Adjuster* o, void*) {
  lateralValueOutput->value( o->value() );
m_Table->SetLateral( o->value() );
}
void SurgeryTableGUI::cb_lateralAdjuster(Fl_Adjuster* o, void* v) {
  ((SurgeryTableGUI*)(o->parent()->user_data()))->cb_lateralAdjuster_i(o,v);
}

inline void SurgeryTableGUI::cb_cranioCaudalAdjuster_i(Fl_Adjuster* o, void*) {
  cranioCaudalValueOutput->value( o->value() );
m_Table->SetAxial( o->value() );
}
void SurgeryTableGUI::cb_cranioCaudalAdjuster(Fl_Adjuster* o, void* v) {
  ((SurgeryTableGUI*)(o->parent()->user_data()))->cb_cranioCaudalAdjuster_i(o,v);
}

inline void SurgeryTableGUI::cb__i(Fl_Button*, void*) {
  const double value = 50.0f;
heightAdjuster->value( value );
heightValueOutput->value( value );
m_Table->SetVertical( value );
}
void SurgeryTableGUI::cb_(Fl_Button* o, void* v) {
  ((SurgeryTableGUI*)(o->parent()->user_data()))->cb__i(o,v);
}

inline void SurgeryTableGUI::cb_1_i(Fl_Button* o, void*) {
  lateralAdjuster->value( 0 );
lateralValueOutput->value( o->value() );
m_Table->SetLateral( o->value() );
}
void SurgeryTableGUI::cb_1(Fl_Button* o, void* v) {
  ((SurgeryTableGUI*)(o->parent()->user_data()))->cb_1_i(o,v);
}

inline void SurgeryTableGUI::cb_2_i(Fl_Button*, void*) {
  const double value = 600.0f;
cranioCaudalAdjuster->value( value );
cranioCaudalValueOutput->value( value );
m_Table->SetAxial( value );
}
void SurgeryTableGUI::cb_2(Fl_Button* o, void* v) {
  ((SurgeryTableGUI*)(o->parent()->user_data()))->cb_2_i(o,v);
}

SurgeryTableGUI::SurgeryTableGUI() {
  Fl_Window* w;
  { Fl_Window* o = controlWindow = new Fl_Window(301, 103, "Surgery Table Controls");
    w = o;
    o->user_data((void*)(this));
    { Fl_Adjuster* o = heightAdjuster = new Fl_Adjuster(97, 19, 120, 20, "Height        ");
      o->maximum(500);
      o->step(0.01);
      o->value(50);
      o->callback((Fl_Callback*)cb_heightAdjuster);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Output* o = heightValueOutput = new Fl_Value_Output(220, 19, 50, 20);
      o->value(250);
    }
    { Fl_Adjuster* o = lateralAdjuster = new Fl_Adjuster(97, 41, 120, 20, "Lateral       ");
      o->minimum(-150);
      o->maximum(150);
      o->step(0.01);
      o->callback((Fl_Callback*)cb_lateralAdjuster);
      o->align(FL_ALIGN_LEFT);
    }
    lateralValueOutput = new Fl_Value_Output(220, 41, 50, 20);
    { Fl_Adjuster* o = cranioCaudalAdjuster = new Fl_Adjuster(97, 63, 120, 20, "Cran/Caud ");
      o->maximum(1000);
      o->step(0.01);
      o->value(600);
      o->callback((Fl_Callback*)cb_cranioCaudalAdjuster);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Output* o = cranioCaudalValueOutput = new Fl_Value_Output(220, 63, 50, 20);
      o->value(250);
    }
    { Fl_Button* o = new Fl_Button(272, 19, 8, 20);
      o->callback((Fl_Callback*)cb_);
    }
    { Fl_Button* o = new Fl_Button(272, 41, 8, 20);
      o->callback((Fl_Callback*)cb_1);
    }
    { Fl_Button* o = new Fl_Button(272, 63, 8, 20);
      o->callback((Fl_Callback*)cb_2);
    }
    o->end();
  }
}

SurgeryTableGUI::~SurgeryTableGUI() {
}

void SurgeryTableGUI::Show(void) {
  controlWindow->show();
}

void SurgeryTableGUI::Hide(void) {
  controlWindow->hide();
}

void SurgeryTableGUI::SetTable( li::SurgeryTable * table) {
  m_Table = table;
heightValueOutput->value( m_Table->GetVertical() );
heightAdjuster->value( m_Table->GetVertical() );
lateralValueOutput->value( m_Table->GetLateral() );
lateralAdjuster->value( m_Table->GetLateral() );
cranioCaudalValueOutput->value( m_Table->GetAxial() );
cranioCaudalAdjuster->value( m_Table->GetAxial() );
}
