# data file for the Fltk User Interface Designer (fluid)
version 1.0009 
header_name {.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3
class FluoroscopyCArmMobileGUI {open
} {
  decl {li::FluoroscopyCArmMobile::Pointer m_Unit;} {}
  Function {FluoroscopyCArmMobileGUI()} {} {
    Fl_Window controlWindow {
      label {Flurosocopy Unit Control} selected
      xywh {623 570 315 325}
      code0 {\#include "liFluoroscopyCArmMobile.h"}
      code1 {\#include "liCommandEvents.h"} visible
    } {
      Fl_Roller cranCaudRoller {
        label {Cran/Caud  }
        callback {cranCaudValueOutput->value( o->value() );
m_Unit->SetCranioCaudalAngle( o->value() );}
        xywh {97 17 125 25} type Horizontal align 4 minimum -60 maximum 60 step 0.1
      }
      Fl_Value_Output cranCaudValueOutput {
        xywh {225 17 50 25} step 0.1
      }
      Fl_Roller raoLaoRoller {
        label {Rao / Lao   }
        callback {raoLaoValueOutput->value( o->value() );
m_Unit->SetRaoLaoAngle( o->value() );}
        xywh {97 44 125 25} type Horizontal align 4 minimum -90 maximum 90 step 0.1
      }
      Fl_Value_Output raoLaoValueOutput {
        xywh {225 44 50 25} step 0.1
      }
      Fl_Button {} {
        callback {const double value = m_Unit->GetAxisTilt();
cranCaudRoller->value( value );
cranCaudValueOutput->value( value );
m_Unit->SetCranioCaudalAngle( value );}
        xywh {277 17 10 25}
      }
      Fl_Button {} {
        callback {raoLaoRoller->value( 0 );
raoLaoValueOutput->value( 0 );
m_Unit->SetRaoLaoAngle( 0 );}
        xywh {277 44 10 25}
      }
      Fl_Roller azimuthRoller {
        label {Azimuth      }
        callback {azimuthValueOutput->value( o->value() );
m_Unit->SetAzimuthAngle( o->value() );}
        xywh {97 71 125 25} type Horizontal align 4 minimum -270 maximum 270 step 0.1
      }
      Fl_Value_Output azimuthValueOutput {
        xywh {225 71 50 25} step 0.1
      }
      Fl_Button {} {
        callback {azimuthRoller->value( 0 );
azimuthValueOutput->value( 0 );
m_Unit->SetAzimuthAngle( 0 );}
        xywh {277 71 10 25}
      }
      Fl_Adjuster cranioCaudalPositionAdjuster {
        label {Cran/Caud }
        callback {cranioCaudalPositionValueOutput->value( o->value() );
m_Unit->SetCranioCaudalPosition( o->value() );}
        xywh {97 98 126 25} align 4 minimum -1000 maximum 1000 step 0.01
      }
      Fl_Value_Output cranioCaudalPositionValueOutput {
        xywh {225 98 50 25} step 0.1
      }
      Fl_Button {} {
        callback {cranioCaudalPositionAdjuster->value( 0 );
cranioCaudalPositionValueOutput->value( 0 );
m_Unit->SetCranioCaudalPosition( 0 );}
        xywh {277 98 10 25}
      }
      Fl_Adjuster lateralPositionAdjuster {
        label {Lateral       }
        callback {lateralPositionValueOutput->value( o->value() );
m_Unit->SetLateralPosition( o->value() );}
        xywh {97 125 126 25} align 4 minimum -1000 maximum 1000 step 0.01
      }
      Fl_Value_Output lateralPositionValueOutput {
        xywh {225 125 50 25} step 0.1
      }
      Fl_Button {} {
        callback {lateralPositionAdjuster->value( 0 );
lateralPositionValueOutput->value( 0 );
m_Unit->SetLateralPosition( 0 );}
        xywh {277 124 10 25}
      }
      Fl_Button {} {
        callback {const double value = m_Unit->GetAxisTilt();
cranCaudRoller->value( value - 90.0 );
cranCaudValueOutput->value( value - 90.0 );
m_Unit->SetCranioCaudalAngle( value -90.0 );}
        xywh {288 17 10 25}
      }
      Fl_Button {} {
        callback {azimuthRoller->value( 180 );
azimuthValueOutput->value( 180 );
m_Unit->SetAzimuthAngle( 180 );}
        xywh {288 71 10 25}
      }
      Fl_Check_Button {} {
        label { FOV}
        callback {m_Unit->SetFovVisible( o->value() ? true : false );}
        xywh {215 272 70 30} box ENGRAVED_FRAME down_box DIAMOND_DOWN_BOX value 1 selection_color 2
      }
      Fl_Choice {} {
        label {Detector : }
        xywh {120 274 70 28}
      } {
        menuitem {} {
          label Up
          callback {m_Unit->SetDetectorPosition( li::FluoroscopyCArm::DetectorUp );}
          xywh {0 0 100 20}
        }
        menuitem {} {
          label Down
          callback {m_Unit->SetDetectorPosition( li::FluoroscopyCArm::DetectorDown );}
          xywh {10 10 100 20}
        }
      }
      Fl_Value_Input sourceToFilmDistanceValueInput {
        label {Source/Film Distance }
        callback {SetUnitGeometricParameters( sourceToFilmDistanceValueInput->value(), detectorDiameterValueInput->value() );}
        xywh {215 189 60 25} maximum 3000 value 1170
      }
      Fl_Choice {} {
        label {Configuration : }
        xywh {160 160 115 25}
      } {
        menuitem {} {
          label {TIPS AP}
          callback {const double stfd = 1170.0f;
const double vps  = 252.579f;
SetUnitGeometricParameters( stfd, vps );}
          xywh {0 0 100 20}
        }
        menuitem {} {
          label {TIPS LAT}
          callback {const double stfd = 1180.0f;
const double vps  = 200.3f;
SetUnitGeometricParameters( stfd, vps );}
          xywh {10 10 100 20}
        }
      }
      Fl_Value_Input detectorDiameterValueInput {
        label {View Plane Size }
        callback {SetUnitGeometricParameters( sourceToFilmDistanceValueInput->value(), detectorDiameterValueInput->value() );}
        xywh {215 215 60 25} maximum 500 value 252.5
      }
      Fl_Value_Output fieldOfViewValueOutput {
        label {Field Of View}
        xywh {215 240 60 25}
      }
    }
  }
  Function {~FluoroscopyCArmMobileGUI()} {return_type virtual
  } {}
  Function {Show(void)} {return_type void
  } {
    code {controlWindow->show();} {}
  }
  Function {Hide(void)} {return_type void
  } {
    code {controlWindow->hide();} {}
  }
  Function {SetFluoroscopyUnit( li::FluoroscopyCArmMobile * unit )} {return_type void
  } {
    code {m_Unit = unit;
cranCaudRoller->value( m_Unit->GetCranioCaudalAngle() );
cranCaudValueOutput->value( m_Unit->GetCranioCaudalAngle() );
raoLaoRoller->value( m_Unit->GetRaoLaoAngle() );
raoLaoValueOutput->value( m_Unit->GetRaoLaoAngle() );
azimuthRoller->value( m_Unit->GetAzimuthAngle() );
azimuthValueOutput->value( m_Unit->GetAzimuthAngle() );
cranioCaudalPositionAdjuster->value( m_Unit->GetCranioCaudalPosition() );
cranioCaudalPositionValueOutput->value( m_Unit->GetCranioCaudalPosition() );
lateralPositionAdjuster->value( m_Unit->GetCranioCaudalPosition() );
lateralPositionValueOutput->value( m_Unit->GetCranioCaudalPosition() );} {}
  }
  Function {SetUnitGeometricParameters(double stfd,double vps)} {return_type {virtual void}
  } {
    code {sourceToFilmDistanceValueInput->value( stfd );
detectorDiameterValueInput->value( vps );
m_Unit->SetSourceToFilmDistance( stfd );
m_Unit->SetDetectorRadius( vps / 2.0 );
m_Unit->InvokeEvent( li::FieldOfViewChangedEvent );
const double angle = atan2( vps/2.0, stfd );
fieldOfViewValueOutput->value( 2.0 * angle * 45.0 / atan(1.0f) );} {}
  }
} 
