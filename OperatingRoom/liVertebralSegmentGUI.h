// generated by Fast Light User Interface Designer (fluid) version 1.0010

#ifndef liVertebralSegmentGUI_h
#define liVertebralSegmentGUI_h
#include <FL/Fl.H>
#include <FL/Fl_Window.H>
#include <liVertebralSegment.h>
#include <liCommandEvents.h>
#include <liVertebralSampleGenerator.h>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Button.H>
#include <Fl/fl_color_chooser.h>
#include <itkPhysicalImage.h>
#include <FL/Fl_Check_Button.H>
#include <fltkRegularStepGradientDescent.h>
#include <liVertebralSegmentRegistrator.h>
#include <FL/Fl_Output.H>

class liVertebralSegmentGUI {
  li::VertebralSegment::Pointer m_VertebralSegment;
  li::VertebralSegmentRegistrator::Pointer m_VertebralSegmentRegistrator;
  li::VertebralSampleGenerator m_SampleGenerator;
  fltk::RegularStepGradientDescent< li::VertebralSegmentRegistrator::VolumeRegistrationOptimizer > m_VolumeRegistrationOptimizerGUI;
public:
  liVertebralSegmentGUI();
  Fl_Window *vertebraWindow;
  Fl_Counter *UpperEndYRadiusCounter;
private:
  inline void cb_UpperEndYRadiusCounter_i(Fl_Counter*, void*);
  static void cb_UpperEndYRadiusCounter(Fl_Counter*, void*);
public:
  Fl_Counter *UpperEndXRadiusCounter;
private:
  inline void cb_UpperEndXRadiusCounter_i(Fl_Counter*, void*);
  static void cb_UpperEndXRadiusCounter(Fl_Counter*, void*);
public:
  Fl_Counter *UpperEndYConcavityDepthCounter;
private:
  inline void cb_UpperEndYConcavityDepthCounter_i(Fl_Counter*, void*);
  static void cb_UpperEndYConcavityDepthCounter(Fl_Counter*, void*);
public:
  Fl_Counter *UpperEndYConcavityWidthCounter;
private:
  inline void cb_UpperEndYConcavityWidthCounter_i(Fl_Counter*, void*);
  static void cb_UpperEndYConcavityWidthCounter(Fl_Counter*, void*);
public:
  Fl_Counter *UpperEndInclinationCounter;
private:
  inline void cb_UpperEndInclinationCounter_i(Fl_Counter*, void*);
  static void cb_UpperEndInclinationCounter(Fl_Counter*, void*);
public:
  Fl_Counter *LowerEndYRadiusCounter;
private:
  inline void cb_LowerEndYRadiusCounter_i(Fl_Counter*, void*);
  static void cb_LowerEndYRadiusCounter(Fl_Counter*, void*);
public:
  Fl_Counter *LowerEndXRadiusCounter;
private:
  inline void cb_LowerEndXRadiusCounter_i(Fl_Counter*, void*);
  static void cb_LowerEndXRadiusCounter(Fl_Counter*, void*);
public:
  Fl_Counter *LowerEndYConcavityDepthCounter;
private:
  inline void cb_LowerEndYConcavityDepthCounter_i(Fl_Counter*, void*);
  static void cb_LowerEndYConcavityDepthCounter(Fl_Counter*, void*);
public:
  Fl_Counter *LowerEndYConcavityWidthCounter;
private:
  inline void cb_LowerEndYConcavityWidthCounter_i(Fl_Counter*, void*);
  static void cb_LowerEndYConcavityWidthCounter(Fl_Counter*, void*);
public:
  Fl_Counter *LowerEndInclinationCounter;
private:
  inline void cb_LowerEndInclinationCounter_i(Fl_Counter*, void*);
  static void cb_LowerEndInclinationCounter(Fl_Counter*, void*);
public:
  Fl_Counter *SectorsCounter;
private:
  inline void cb_SectorsCounter_i(Fl_Counter*, void*);
  static void cb_SectorsCounter(Fl_Counter*, void*);
public:
  Fl_Counter *LevelsCounter;
private:
  inline void cb_LevelsCounter_i(Fl_Counter*, void*);
  static void cb_LevelsCounter(Fl_Counter*, void*);
public:
  Fl_Counter *MiddleYRadiusCounter;
private:
  inline void cb_MiddleYRadiusCounter_i(Fl_Counter*, void*);
  static void cb_MiddleYRadiusCounter(Fl_Counter*, void*);
public:
  Fl_Counter *MiddleXRadiusCounter;
private:
  inline void cb_MiddleXRadiusCounter_i(Fl_Counter*, void*);
  static void cb_MiddleXRadiusCounter(Fl_Counter*, void*);
public:
  Fl_Counter *HeightCounter;
private:
  inline void cb_HeightCounter_i(Fl_Counter*, void*);
  static void cb_HeightCounter(Fl_Counter*, void*);
  static Fl_Menu_Item menu_Display[];
  inline void cb_Surface_i(Fl_Menu_*, void*);
  static void cb_Surface(Fl_Menu_*, void*);
  inline void cb_Lines_i(Fl_Menu_*, void*);
  static void cb_Lines(Fl_Menu_*, void*);
  inline void cb_Points_i(Fl_Menu_*, void*);
  static void cb_Points(Fl_Menu_*, void*);
  inline void cb_None_i(Fl_Menu_*, void*);
  static void cb_None(Fl_Menu_*, void*);
  inline void cb_Color_i(Fl_Button*, void*);
  static void cb_Color(Fl_Button*, void*);
public:
  Fl_Counter *VerticalPositionCounter;
private:
  inline void cb_VerticalPositionCounter_i(Fl_Counter*, void*);
  static void cb_VerticalPositionCounter(Fl_Counter*, void*);
public:
  Fl_Counter *HorizontalPositionCounter;
private:
  inline void cb_HorizontalPositionCounter_i(Fl_Counter*, void*);
  static void cb_HorizontalPositionCounter(Fl_Counter*, void*);
public:
  Fl_Counter *VerticalAngleCounter;
private:
  inline void cb_VerticalAngleCounter_i(Fl_Counter*, void*);
  static void cb_VerticalAngleCounter(Fl_Counter*, void*);
public:
  Fl_Counter *HorizontalAngleCounter;
private:
  inline void cb_HorizontalAngleCounter_i(Fl_Counter*, void*);
  static void cb_HorizontalAngleCounter(Fl_Counter*, void*);
public:
  Fl_Counter *LengthCounter;
private:
  inline void cb_LengthCounter_i(Fl_Counter*, void*);
  static void cb_LengthCounter(Fl_Counter*, void*);
public:
  Fl_Counter *VerticalRadiusCounter;
private:
  inline void cb_VerticalRadiusCounter_i(Fl_Counter*, void*);
  static void cb_VerticalRadiusCounter(Fl_Counter*, void*);
public:
  Fl_Counter *HorizontalRadiusCounter;
private:
  inline void cb_HorizontalRadiusCounter_i(Fl_Counter*, void*);
  static void cb_HorizontalRadiusCounter(Fl_Counter*, void*);
  static Fl_Menu_Item menu_Display1[];
  inline void cb_Surface1_i(Fl_Menu_*, void*);
  static void cb_Surface1(Fl_Menu_*, void*);
  inline void cb_Lines1_i(Fl_Menu_*, void*);
  static void cb_Lines1(Fl_Menu_*, void*);
  inline void cb_Points1_i(Fl_Menu_*, void*);
  static void cb_Points1(Fl_Menu_*, void*);
  inline void cb_None1_i(Fl_Menu_*, void*);
  static void cb_None1(Fl_Menu_*, void*);
public:
  Fl_Counter *PedicleSectorsCounter;
private:
  inline void cb_PedicleSectorsCounter_i(Fl_Counter*, void*);
  static void cb_PedicleSectorsCounter(Fl_Counter*, void*);
  inline void cb_Color1_i(Fl_Button*, void*);
  static void cb_Color1(Fl_Button*, void*);
public:
  Fl_Counter *FrontalPositionCounter;
private:
  inline void cb_FrontalPositionCounter_i(Fl_Counter*, void*);
  static void cb_FrontalPositionCounter(Fl_Counter*, void*);
public:
  Fl_Counter *ShiftCounter;
private:
  inline void cb_ShiftCounter_i(Fl_Counter*, void*);
  static void cb_ShiftCounter(Fl_Counter*, void*);
public:
  Fl_Counter *RotationCounter;
private:
  inline void cb_RotationCounter_i(Fl_Counter*, void*);
  static void cb_RotationCounter(Fl_Counter*, void*);
  inline void cb_Show_i(Fl_Button*, void*);
  static void cb_Show(Fl_Button*, void*);
  inline void cb_Generate_i(Fl_Button*, void*);
  static void cb_Generate(Fl_Button*, void*);
  inline void cb_Update_i(Fl_Button*, void*);
  static void cb_Update(Fl_Button*, void*);
  inline void cb_Samples_i(Fl_Check_Button*, void*);
  static void cb_Samples(Fl_Check_Button*, void*);
  inline void cb_Axis_i(Fl_Check_Button*, void*);
  static void cb_Axis(Fl_Check_Button*, void*);
  inline void cb_Registration_i(Fl_Button*, void*);
  static void cb_Registration(Fl_Button*, void*);
public:
  Fl_Output *NameOutput;
  ~liVertebralSegmentGUI();
  void Show(void);
  void Hide(void);
  void SetVertebralSegment( li::VertebralSegment * segment );
  void SetVolume( li::VertebralSegmentRegistrator::VolumeImageType * image );
  void SetImage( li::VertebralSegmentRegistrator::FluoroscopicImageType * image );
};
#endif
