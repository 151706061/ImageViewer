# data file for the Fltk User Interface Designer (fluid)
version 1.0010 
header_name {.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3
class SpineModelGUI {open
} {
  decl {li::SpineModel::Pointer m_SpineModel;} {}
  decl {li::VertebralSegmentRegistrator::FluoroscopicImageType::Pointer m_Image;} {}
  decl {li::VertebralSegmentRegistrator::VolumeImageType::Pointer m_Volume;} {}
  Function {SpineModelGUI(void)} {return_type void
  } {
    code {m_SpineModel = li::SpineModel::New();} {}
    Fl_Window spineWindow {
      label {Spine Controls}
      xywh {872 322 257 193}
      code0 {\#include <liSpineModel.h>}
      code1 {\#include <liVertebralSegmentGUI.h>} visible
    } {
      Fl_Tabs {} {
        xywh {5 10 245 175}
      } {
        Fl_Group {} {
          label Segments
          xywh {10 35 240 145} hide
        } {
          Fl_Browser segmentBrowser {
            label {Vertebral Segments}
            callback {liVertebralSegmentGUI *vgui =
static_cast< liVertebralSegmentGUI *>( o->data( o->value() ) );
if( vgui )
{
   vgui->Show();
}}
            xywh {35 70 195 100} type Select box DOWN_BOX align 1
          }
        }
        Fl_Group {} {
          label Position
          xywh {15 50 215 125}
        } {
          Fl_Counter angleCounter {
            label Angle
            callback {m_SpineModel->SetCranioCaudalAngle(o->value());
m_SpineModel->InvokeEvent( li::PatientMovedEvent );}
            xywh {75 60 115 25} align 4
          }
          Fl_Counter xPositionCounter {
            label {X    }
            callback {li::SpineModel::PointType pnt = m_SpineModel->GetPosition();
pnt[0] = o->value();
m_SpineModel->SetPosition( pnt );
m_SpineModel->InvokeEvent( li::PatientMovedEvent );}
            xywh {75 85 115 25} align 4
          }
          Fl_Counter yPositionCounter {
            label {Y    }
            callback {li::SpineModel::PointType pnt = m_SpineModel->GetPosition();
pnt[1] = o->value();
m_SpineModel->SetPosition( pnt );
m_SpineModel->InvokeEvent( li::PatientMovedEvent );}
            xywh {75 110 115 25} align 4
          }
          Fl_Counter zPositionCounter {
            label {Z    }
            callback {li::SpineModel::PointType pnt = m_SpineModel->GetPosition();
pnt[2] = o->value();
m_SpineModel->SetPosition( pnt );
m_SpineModel->InvokeEvent( li::PatientMovedEvent );}
            xywh {75 135 115 25} align 4
          }
        }
        Fl_Group {} {
          label {Posture }
          xywh {25 45 210 130} hide deactivate
        } {
          Fl_Roller {} {
            label {Flexion/Extension}
            xywh {60 75 150 20} type Horizontal align 1 minimum -40 maximum 40 step 0.1 deactivate
          }
        }
      }
    }
  }
  Function {~SpineModelGUI()} {} {}
  Function {Show(void)} {return_type void
  } {
    code {spineWindow->show();} {}
  }
  Function {Hide(void)} {return_type void
  } {
    code {spineWindow->hide();
for(int i=0; i<segmentBrowser->size(); i++)
{
  liVertebralSegmentGUI *vgui =
   static_cast< liVertebralSegmentGUI *>( segmentBrowser->data( i+1 ) );
  if( vgui ) 
  {
   vgui->Hide();
  }
}} {}
  }
  Function {SetSpineModel( li::SpineModel * model )} {return_type void
  } {
    code {m_SpineModel = model;
for(int i=0; i<segmentBrowser->size(); i++)
{
  liVertebralSegmentGUI *vgui =
   static_cast< liVertebralSegmentGUI *>( segmentBrowser->data( i+1 ) );
   delete vgui;
}
segmentBrowser->clear();
li::SpineModel::VertebraContainer::iterator it =
m_SpineModel->GetVertebralSegmentsBegin();
while( it != m_SpineModel->GetVertebralSegmentsEnd())
{
  liVertebralSegmentGUI *vgui = new liVertebralSegmentGUI;
  vgui->SetVertebralSegment( (*it).GetPointer() );
  segmentBrowser->add( (*it)->GetName() );
  segmentBrowser->data( segmentBrowser->size(), (void *)vgui );
  vgui->SetImage( m_Image );
  ++it;
}

UpdateGUI();} {}
  }
  Function {SetImage( li::VertebralSegmentRegistrator::FluoroscopicImageType * image )} {return_type void
  } {
    code {m_Image = image;
for(unsigned int i=0; i<segmentBrowser->size(); i++)
{
  liVertebralSegmentGUI *vgui = 
    (liVertebralSegmentGUI *)( segmentBrowser->data(i+1) ); 
  vgui->SetImage( m_Image );
}} {}
  }
  Function {SetVolume( li::VertebralSegmentRegistrator::VolumeImageType * volume )} {selected return_type void
  } {
    code {m_Volume = volume;
for(unsigned int i=0; i<segmentBrowser->size(); i++)
{
  liVertebralSegmentGUI *vgui = 
    (liVertebralSegmentGUI *)( segmentBrowser->data(i+1) ); 
  vgui->SetVolume( m_Volume );
}} {}
  }
  Function {UpdateGUI( void )} {return_type void
  } {
    code {angleCounter->value( m_SpineModel->GetCranioCaudalAngle() );
xPositionCounter->value( m_SpineModel->GetPosition()[0] );
yPositionCounter->value( m_SpineModel->GetPosition()[1] );
zPositionCounter->value( m_SpineModel->GetPosition()[2] );} {}
  }
} 
