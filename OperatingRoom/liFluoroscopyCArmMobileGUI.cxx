// generated by Fast Light User Interface Designer (fluid) version 1.0009

#include "liFluoroscopyCArmMobileGUI.h"

inline void FluoroscopyCArmMobileGUI::cb_cranCaudRoller_i(Fl_Roller* o, void*) {
  cranCaudValueOutput->value( o->value() );
m_Unit->SetCranioCaudalAngle( o->value() );
}
void FluoroscopyCArmMobileGUI::cb_cranCaudRoller(Fl_Roller* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_cranCaudRoller_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_raoLaoRoller_i(Fl_Roller* o, void*) {
  raoLaoValueOutput->value( o->value() );
m_Unit->SetRaoLaoAngle( o->value() );
}
void FluoroscopyCArmMobileGUI::cb_raoLaoRoller(Fl_Roller* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_raoLaoRoller_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb__i(Fl_Button*, void*) {
  const double value = m_Unit->GetAxisTilt();
cranCaudRoller->value( value );
cranCaudValueOutput->value( value );
m_Unit->SetCranioCaudalAngle( value );
}
void FluoroscopyCArmMobileGUI::cb_(Fl_Button* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb__i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_1_i(Fl_Button*, void*) {
  raoLaoRoller->value( 0 );
raoLaoValueOutput->value( 0 );
m_Unit->SetRaoLaoAngle( 0 );
}
void FluoroscopyCArmMobileGUI::cb_1(Fl_Button* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_1_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_azimuthRoller_i(Fl_Roller* o, void*) {
  azimuthValueOutput->value( o->value() );
m_Unit->SetAzimuthAngle( o->value() );
}
void FluoroscopyCArmMobileGUI::cb_azimuthRoller(Fl_Roller* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_azimuthRoller_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_2_i(Fl_Button*, void*) {
  azimuthRoller->value( 0 );
azimuthValueOutput->value( 0 );
m_Unit->SetAzimuthAngle( 0 );
}
void FluoroscopyCArmMobileGUI::cb_2(Fl_Button* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_2_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_cranioCaudalPositionAdjuster_i(Fl_Adjuster* o, void*) {
  cranioCaudalPositionValueOutput->value( o->value() );
m_Unit->SetCranioCaudalPosition( o->value() );
}
void FluoroscopyCArmMobileGUI::cb_cranioCaudalPositionAdjuster(Fl_Adjuster* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_cranioCaudalPositionAdjuster_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_3_i(Fl_Button*, void*) {
  cranioCaudalPositionAdjuster->value( 0 );
cranioCaudalPositionValueOutput->value( 0 );
m_Unit->SetCranioCaudalPosition( 0 );
}
void FluoroscopyCArmMobileGUI::cb_3(Fl_Button* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_3_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_lateralPositionAdjuster_i(Fl_Adjuster* o, void*) {
  lateralPositionValueOutput->value( o->value() );
m_Unit->SetLateralPosition( o->value() );
}
void FluoroscopyCArmMobileGUI::cb_lateralPositionAdjuster(Fl_Adjuster* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_lateralPositionAdjuster_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_4_i(Fl_Button*, void*) {
  lateralPositionAdjuster->value( 0 );
lateralPositionValueOutput->value( 0 );
m_Unit->SetLateralPosition( 0 );
}
void FluoroscopyCArmMobileGUI::cb_4(Fl_Button* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_4_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_5_i(Fl_Button*, void*) {
  const double value = m_Unit->GetAxisTilt();
cranCaudRoller->value( value - 90.0 );
cranCaudValueOutput->value( value - 90.0 );
m_Unit->SetCranioCaudalAngle( value -90.0 );
}
void FluoroscopyCArmMobileGUI::cb_5(Fl_Button* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_5_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_6_i(Fl_Button*, void*) {
  azimuthRoller->value( 180 );
azimuthValueOutput->value( 180 );
m_Unit->SetAzimuthAngle( 180 );
}
void FluoroscopyCArmMobileGUI::cb_6(Fl_Button* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_6_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_FOV_i(Fl_Check_Button* o, void*) {
  m_Unit->SetFovVisible( o->value() ? true : false );
}
void FluoroscopyCArmMobileGUI::cb_FOV(Fl_Check_Button* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_FOV_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_Up_i(Fl_Menu_*, void*) {
  m_Unit->SetDetectorPosition( li::FluoroscopyCArm::DetectorUp );
}
void FluoroscopyCArmMobileGUI::cb_Up(Fl_Menu_* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_Up_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_Down_i(Fl_Menu_*, void*) {
  m_Unit->SetDetectorPosition( li::FluoroscopyCArm::DetectorDown );
}
void FluoroscopyCArmMobileGUI::cb_Down(Fl_Menu_* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_Down_i(o,v);
}

Fl_Menu_Item FluoroscopyCArmMobileGUI::menu_Detector[] = {
 {"Up", 0,  (Fl_Callback*)FluoroscopyCArmMobileGUI::cb_Up, 0, 0, 0, 0, 14, 0},
 {"Down", 0,  (Fl_Callback*)FluoroscopyCArmMobileGUI::cb_Down, 0, 0, 0, 0, 14, 0},
 {0}
};

inline void FluoroscopyCArmMobileGUI::cb_sourceToFilmDistanceValueInput_i(Fl_Value_Input*, void*) {
  SetUnitGeometricParameters( sourceToFilmDistanceValueInput->value(), detectorDiameterValueInput->value() );
}
void FluoroscopyCArmMobileGUI::cb_sourceToFilmDistanceValueInput(Fl_Value_Input* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_sourceToFilmDistanceValueInput_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_TIPS_i(Fl_Menu_*, void*) {
  const double stfd = 1170.0f;
const double vps  = 252.579f;
SetUnitGeometricParameters( stfd, vps );
}
void FluoroscopyCArmMobileGUI::cb_TIPS(Fl_Menu_* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_TIPS_i(o,v);
}

inline void FluoroscopyCArmMobileGUI::cb_TIPS1_i(Fl_Menu_*, void*) {
  const double stfd = 1180.0f;
const double vps  = 200.3f;
SetUnitGeometricParameters( stfd, vps );
}
void FluoroscopyCArmMobileGUI::cb_TIPS1(Fl_Menu_* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_TIPS1_i(o,v);
}

Fl_Menu_Item FluoroscopyCArmMobileGUI::menu_Configuration[] = {
 {"TIPS AP", 0,  (Fl_Callback*)FluoroscopyCArmMobileGUI::cb_TIPS, 0, 0, 0, 0, 14, 0},
 {"TIPS LAT", 0,  (Fl_Callback*)FluoroscopyCArmMobileGUI::cb_TIPS1, 0, 0, 0, 0, 14, 0},
 {0}
};

inline void FluoroscopyCArmMobileGUI::cb_detectorDiameterValueInput_i(Fl_Value_Input*, void*) {
  SetUnitGeometricParameters( sourceToFilmDistanceValueInput->value(), detectorDiameterValueInput->value() );
}
void FluoroscopyCArmMobileGUI::cb_detectorDiameterValueInput(Fl_Value_Input* o, void* v) {
  ((FluoroscopyCArmMobileGUI*)(o->parent()->user_data()))->cb_detectorDiameterValueInput_i(o,v);
}

FluoroscopyCArmMobileGUI::FluoroscopyCArmMobileGUI() {
  Fl_Window* w;
  { Fl_Window* o = controlWindow = new Fl_Window(315, 325, "Flurosocopy Unit Control");
    w = o;
    o->user_data((void*)(this));
    { Fl_Roller* o = cranCaudRoller = new Fl_Roller(97, 17, 125, 25, "Cran/Caud  ");
      o->type(1);
      o->minimum(-60);
      o->maximum(60);
      o->step(0.1);
      o->callback((Fl_Callback*)cb_cranCaudRoller);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Output* o = cranCaudValueOutput = new Fl_Value_Output(225, 17, 50, 25);
      o->step(0.1);
    }
    { Fl_Roller* o = raoLaoRoller = new Fl_Roller(97, 44, 125, 25, "Rao / Lao   ");
      o->type(1);
      o->minimum(-90);
      o->maximum(90);
      o->step(0.1);
      o->callback((Fl_Callback*)cb_raoLaoRoller);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Output* o = raoLaoValueOutput = new Fl_Value_Output(225, 44, 50, 25);
      o->step(0.1);
    }
    { Fl_Button* o = new Fl_Button(277, 17, 10, 25);
      o->callback((Fl_Callback*)cb_);
    }
    { Fl_Button* o = new Fl_Button(277, 44, 10, 25);
      o->callback((Fl_Callback*)cb_1);
    }
    { Fl_Roller* o = azimuthRoller = new Fl_Roller(97, 71, 125, 25, "Azimuth      ");
      o->type(1);
      o->minimum(-270);
      o->maximum(270);
      o->step(0.1);
      o->callback((Fl_Callback*)cb_azimuthRoller);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Output* o = azimuthValueOutput = new Fl_Value_Output(225, 71, 50, 25);
      o->step(0.1);
    }
    { Fl_Button* o = new Fl_Button(277, 71, 10, 25);
      o->callback((Fl_Callback*)cb_2);
    }
    { Fl_Adjuster* o = cranioCaudalPositionAdjuster = new Fl_Adjuster(97, 98, 126, 25, "Cran/Caud ");
      o->minimum(-1000);
      o->maximum(1000);
      o->step(0.01);
      o->callback((Fl_Callback*)cb_cranioCaudalPositionAdjuster);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Output* o = cranioCaudalPositionValueOutput = new Fl_Value_Output(225, 98, 50, 25);
      o->step(0.1);
    }
    { Fl_Button* o = new Fl_Button(277, 98, 10, 25);
      o->callback((Fl_Callback*)cb_3);
    }
    { Fl_Adjuster* o = lateralPositionAdjuster = new Fl_Adjuster(97, 125, 126, 25, "Lateral       ");
      o->minimum(-1000);
      o->maximum(1000);
      o->step(0.01);
      o->callback((Fl_Callback*)cb_lateralPositionAdjuster);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Output* o = lateralPositionValueOutput = new Fl_Value_Output(225, 125, 50, 25);
      o->step(0.1);
    }
    { Fl_Button* o = new Fl_Button(277, 124, 10, 25);
      o->callback((Fl_Callback*)cb_4);
    }
    { Fl_Button* o = new Fl_Button(288, 17, 10, 25);
      o->callback((Fl_Callback*)cb_5);
    }
    { Fl_Button* o = new Fl_Button(288, 71, 10, 25);
      o->callback((Fl_Callback*)cb_6);
    }
    { Fl_Check_Button* o = new Fl_Check_Button(215, 272, 70, 30, " FOV");
      o->box(FL_ENGRAVED_FRAME);
      o->down_box(FL_DIAMOND_DOWN_BOX);
      o->value(1);
      o->selection_color(2);
      o->callback((Fl_Callback*)cb_FOV);
    }
    { Fl_Choice* o = new Fl_Choice(120, 274, 70, 28, "Detector : ");
      o->menu(menu_Detector);
    }
    { Fl_Value_Input* o = sourceToFilmDistanceValueInput = new Fl_Value_Input(215, 189, 60, 25, "Source/Film Distance ");
      o->maximum(3000);
      o->value(1170);
      o->callback((Fl_Callback*)cb_sourceToFilmDistanceValueInput);
    }
    { Fl_Choice* o = new Fl_Choice(160, 160, 115, 25, "Configuration : ");
      o->menu(menu_Configuration);
    }
    { Fl_Value_Input* o = detectorDiameterValueInput = new Fl_Value_Input(215, 215, 60, 25, "View Plane Size ");
      o->maximum(500);
      o->value(252.5);
      o->callback((Fl_Callback*)cb_detectorDiameterValueInput);
    }
    fieldOfViewValueOutput = new Fl_Value_Output(215, 240, 60, 25, "Field Of View");
    o->end();
  }
}

FluoroscopyCArmMobileGUI::~FluoroscopyCArmMobileGUI() {
}

void FluoroscopyCArmMobileGUI::Show(void) {
  controlWindow->show();
}

void FluoroscopyCArmMobileGUI::Hide(void) {
  controlWindow->hide();
}

void FluoroscopyCArmMobileGUI::SetFluoroscopyUnit( li::FluoroscopyCArmMobile * unit ) {
  m_Unit = unit;
cranCaudRoller->value( m_Unit->GetCranioCaudalAngle() );
cranCaudValueOutput->value( m_Unit->GetCranioCaudalAngle() );
raoLaoRoller->value( m_Unit->GetRaoLaoAngle() );
raoLaoValueOutput->value( m_Unit->GetRaoLaoAngle() );
azimuthRoller->value( m_Unit->GetAzimuthAngle() );
azimuthValueOutput->value( m_Unit->GetAzimuthAngle() );
cranioCaudalPositionAdjuster->value( m_Unit->GetCranioCaudalPosition() );
cranioCaudalPositionValueOutput->value( m_Unit->GetCranioCaudalPosition() );
lateralPositionAdjuster->value( m_Unit->GetCranioCaudalPosition() );
lateralPositionValueOutput->value( m_Unit->GetCranioCaudalPosition() );
}

void FluoroscopyCArmMobileGUI::SetUnitGeometricParameters(double stfd,double vps) {
  sourceToFilmDistanceValueInput->value( stfd );
detectorDiameterValueInput->value( vps );
m_Unit->SetSourceToFilmDistance( stfd );
m_Unit->SetDetectorRadius( vps / 2.0 );
m_Unit->InvokeEvent( li::FieldOfViewChangedEvent );
const double angle = atan2( vps/2.0, stfd );
fieldOfViewValueOutput->value( 2.0 * angle * 45.0 / atan(1.0f) );
}
