// generated by Fast Light User Interface Designer (fluid) version 1.0010

#include "liSpineModelGUI.h"

inline void SpineModelGUI::cb_segmentBrowser_i(Fl_Browser* o, void*) {
  liVertebralSegmentGUI *vgui =
static_cast< liVertebralSegmentGUI *>( o->data( o->value() ) );
if( vgui )
{
   vgui->Show();
};
}
void SpineModelGUI::cb_segmentBrowser(Fl_Browser* o, void* v) {
  ((SpineModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_segmentBrowser_i(o,v);
}

inline void SpineModelGUI::cb_angleCounter_i(Fl_Counter* o, void*) {
  m_SpineModel->SetCranioCaudalAngle(o->value());
m_SpineModel->InvokeEvent( li::PatientMovedEvent );
}
void SpineModelGUI::cb_angleCounter(Fl_Counter* o, void* v) {
  ((SpineModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_angleCounter_i(o,v);
}

inline void SpineModelGUI::cb_xPositionCounter_i(Fl_Counter* o, void*) {
  li::SpineModel::PointType pnt = m_SpineModel->GetPosition();
pnt[0] = o->value();
m_SpineModel->SetPosition( pnt );
m_SpineModel->InvokeEvent( li::PatientMovedEvent );
}
void SpineModelGUI::cb_xPositionCounter(Fl_Counter* o, void* v) {
  ((SpineModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_xPositionCounter_i(o,v);
}

inline void SpineModelGUI::cb_yPositionCounter_i(Fl_Counter* o, void*) {
  li::SpineModel::PointType pnt = m_SpineModel->GetPosition();
pnt[1] = o->value();
m_SpineModel->SetPosition( pnt );
m_SpineModel->InvokeEvent( li::PatientMovedEvent );
}
void SpineModelGUI::cb_yPositionCounter(Fl_Counter* o, void* v) {
  ((SpineModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_yPositionCounter_i(o,v);
}

inline void SpineModelGUI::cb_zPositionCounter_i(Fl_Counter* o, void*) {
  li::SpineModel::PointType pnt = m_SpineModel->GetPosition();
pnt[2] = o->value();
m_SpineModel->SetPosition( pnt );
m_SpineModel->InvokeEvent( li::PatientMovedEvent );
}
void SpineModelGUI::cb_zPositionCounter(Fl_Counter* o, void* v) {
  ((SpineModelGUI*)(o->parent()->parent()->parent()->user_data()))->cb_zPositionCounter_i(o,v);
}

SpineModelGUI::SpineModelGUI(void) {
  Fl_Window* w;
  m_SpineModel = li::SpineModel::New();
  { Fl_Window* o = spineWindow = new Fl_Window(257, 193, "Spine Controls");
    w = o;
    o->user_data((void*)(this));
    { Fl_Tabs* o = new Fl_Tabs(5, 10, 245, 175);
      { Fl_Group* o = new Fl_Group(10, 35, 240, 145, "Segments");
        o->hide();
        { Fl_Browser* o = segmentBrowser = new Fl_Browser(35, 70, 195, 100, "Vertebral Segments");
          o->type(1);
          o->box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)cb_segmentBrowser);
          o->align(FL_ALIGN_TOP);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(15, 50, 215, 125, "Position");
        { Fl_Counter* o = angleCounter = new Fl_Counter(75, 60, 115, 25, "Angle");
          o->callback((Fl_Callback*)cb_angleCounter);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Counter* o = xPositionCounter = new Fl_Counter(75, 85, 115, 25, "X    ");
          o->callback((Fl_Callback*)cb_xPositionCounter);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Counter* o = yPositionCounter = new Fl_Counter(75, 110, 115, 25, "Y    ");
          o->callback((Fl_Callback*)cb_yPositionCounter);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Counter* o = zPositionCounter = new Fl_Counter(75, 135, 115, 25, "Z    ");
          o->callback((Fl_Callback*)cb_zPositionCounter);
          o->align(FL_ALIGN_LEFT);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(25, 45, 210, 130, "Posture ");
        o->hide();
        o->deactivate();
        { Fl_Roller* o = new Fl_Roller(60, 75, 150, 20, "Flexion/Extension");
          o->type(1);
          o->minimum(-40);
          o->maximum(40);
          o->step(0.1);
          o->align(FL_ALIGN_TOP);
          o->deactivate();
        }
        o->end();
      }
      o->end();
    }
    o->end();
  }
}

SpineModelGUI::~SpineModelGUI() {
}

void SpineModelGUI::Show(void) {
  spineWindow->show();
}

void SpineModelGUI::Hide(void) {
  spineWindow->hide();
for(int i=0; i<segmentBrowser->size(); i++)
{
  liVertebralSegmentGUI *vgui =
   static_cast< liVertebralSegmentGUI *>( segmentBrowser->data( i+1 ) );
  if( vgui ) 
  {
   vgui->Hide();
  }
}
}

void SpineModelGUI::SetSpineModel( li::SpineModel * model ) {
  m_SpineModel = model;
for(int i=0; i<segmentBrowser->size(); i++)
{
  liVertebralSegmentGUI *vgui =
   static_cast< liVertebralSegmentGUI *>( segmentBrowser->data( i+1 ) );
   delete vgui;
}
segmentBrowser->clear();
li::SpineModel::VertebraContainer::iterator it =
m_SpineModel->GetVertebralSegmentsBegin();
while( it != m_SpineModel->GetVertebralSegmentsEnd())
{
  liVertebralSegmentGUI *vgui = new liVertebralSegmentGUI;
  vgui->SetVertebralSegment( (*it).GetPointer() );
  segmentBrowser->add( (*it)->GetName() );
  segmentBrowser->data( segmentBrowser->size(), (void *)vgui );
  vgui->SetImage( m_Image );
  ++it;
}

UpdateGUI();
}

void SpineModelGUI::SetImage( li::VertebralSegmentRegistrator::FluoroscopicImageType * image ) {
  m_Image = image;
for(unsigned int i=0; i<segmentBrowser->size(); i++)
{
  liVertebralSegmentGUI *vgui = 
    (liVertebralSegmentGUI *)( segmentBrowser->data(i+1) ); 
  vgui->SetImage( m_Image );
}
}

void SpineModelGUI::SetVolume( li::VertebralSegmentRegistrator::VolumeImageType * volume ) {
  m_Volume = volume;
for(unsigned int i=0; i<segmentBrowser->size(); i++)
{
  liVertebralSegmentGUI *vgui = 
    (liVertebralSegmentGUI *)( segmentBrowser->data(i+1) ); 
  vgui->SetVolume( m_Volume );
}
}

void SpineModelGUI::UpdateGUI( void ) {
  angleCounter->value( m_SpineModel->GetCranioCaudalAngle() );
xPositionCounter->value( m_SpineModel->GetPosition()[0] );
yPositionCounter->value( m_SpineModel->GetPosition()[1] );
zPositionCounter->value( m_SpineModel->GetPosition()[2] );
}
