// generated by Fast Light User Interface Designer (fluid) version 1.0010

#include "liSampleGeneratorGUI.h"

inline void liSampleGeneratorGUI::cb_Parameters_i(Fl_Button*, void*) {
  ShowParameters();
}
void liSampleGeneratorGUI::cb_Parameters(Fl_Button* o, void* v) {
  ((liSampleGeneratorGUI*)(o->parent()->user_data()))->cb_Parameters_i(o,v);
}

liSampleGeneratorGUI::liSampleGeneratorGUI() {
  Fl_Window* w;
  { Fl_Window* o = controlWindow = new Fl_Window(209, 225, "Generator");
    w = o;
    o->user_data((void*)(this));
    { Fl_Tabs* o = new Fl_Tabs(10, 15, 185, 165);
      { Fl_Group* o = new Fl_Group(15, 40, 180, 140, "Size");
        o->hide();
        { Fl_Counter* o = xSizeCounter = new Fl_Counter(45, 65, 135, 25, "X :");
          o->minimum(1);
          o->maximum(1000);
          o->step(1);
          o->value(100);
          o->align(FL_ALIGN_LEFT);
          o->lstep( 10.0 );
        }
        { Fl_Counter* o = ySizeCounter = new Fl_Counter(45, 90, 135, 25, "Y :");
          o->minimum(1);
          o->maximum(1000);
          o->step(1);
          o->value(100);
          o->align(FL_ALIGN_LEFT);
          o->lstep( 10.0 );
        }
        { Fl_Counter* o = zSizeCounter = new Fl_Counter(45, 115, 135, 25, "Z :");
          o->minimum(1);
          o->maximum(1000);
          o->step(1);
          o->value(100);
          o->align(FL_ALIGN_LEFT);
          o->lstep( 10.0 );
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(15, 40, 180, 140, "Spacing");
        { Fl_Value_Input* o = xSpacingInput = new Fl_Value_Input(75, 63, 70, 25, "X :   ");
          o->maximum(4);
          o->value(2);
        }
        { Fl_Value_Input* o = ySpacingInput = new Fl_Value_Input(75, 90, 70, 25, "Y :   ");
          o->maximum(4);
          o->value(2);
        }
        { Fl_Value_Input* o = zSpacingInput = new Fl_Value_Input(75, 117, 70, 25, "Z :   ");
          o->maximum(4);
          o->value(2);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(15, 40, 180, 140, "Position");
        o->hide();
        xPositionInput = new Fl_Value_Input(81, 64, 70, 25, "X :   ");
        yPositionInput = new Fl_Value_Input(80, 91, 70, 25, "Y :   ");
        zPositionInput = new Fl_Value_Input(80, 118, 70, 25, "Z :   ");
        o->end();
      }
      { Fl_Group* o = new Fl_Group(25, 50, 180, 140, "Scale");
        o->hide();
        { Fl_Value_Input* o = xScaleInput = new Fl_Value_Input(91, 74, 70, 25, "X :   ");
          o->value(1);
        }
        { Fl_Value_Input* o = yScaleInput = new Fl_Value_Input(90, 101, 70, 25, "Y :   ");
          o->value(1);
        }
        { Fl_Value_Input* o = zScaleInput = new Fl_Value_Input(90, 128, 70, 25, "Z :   ");
          o->value(1);
        }
        o->end();
      }
      o->end();
    }
    { Fl_Button* o = new Fl_Button(45, 190, 125, 25, "Parameters");
      o->callback((Fl_Callback*)cb_Parameters);
    }
    o->end();
  }
}

liSampleGeneratorGUI::~liSampleGeneratorGUI() {
}

void liSampleGeneratorGUI::Show(void) {
}

void liSampleGeneratorGUI::Hide(void) {
}

void liSampleGeneratorGUI::ShowParameters(void) {
}

void liSampleGeneratorGUI::SetScaleX(double val) {
  xScaleInput->value( val );
}

void liSampleGeneratorGUI::SetScaleY(double val) {
  yScaleInput->value( val );
}

void liSampleGeneratorGUI::SetScaleZ(double val) {
  zScaleInput->value( val );
}
