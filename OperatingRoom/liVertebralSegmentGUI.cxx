// generated by Fast Light User Interface Designer (fluid) version 1.0010

#include "liVertebralSegmentGUI.h"

inline void liVertebralSegmentGUI::cb_UpperEndYRadiusCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetUpperEndYRadius(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_UpperEndYRadiusCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_UpperEndYRadiusCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_UpperEndXRadiusCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetUpperEndXRadius(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_UpperEndXRadiusCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_UpperEndXRadiusCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_UpperEndYConcavityDepthCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetUpperEndYConcavityDepth(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_UpperEndYConcavityDepthCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_UpperEndYConcavityDepthCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_UpperEndYConcavityWidthCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetUpperEndYConcavityWidth(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_UpperEndYConcavityWidthCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_UpperEndYConcavityWidthCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_UpperEndInclinationCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetUpperEndInclination(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_UpperEndInclinationCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_UpperEndInclinationCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_LowerEndYRadiusCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetLowerEndYRadius(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_LowerEndYRadiusCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_LowerEndYRadiusCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_LowerEndXRadiusCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetLowerEndXRadius(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_LowerEndXRadiusCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_LowerEndXRadiusCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_LowerEndYConcavityDepthCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetLowerEndYConcavityDepth(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_LowerEndYConcavityDepthCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_LowerEndYConcavityDepthCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_LowerEndYConcavityWidthCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetLowerEndYConcavityWidth(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_LowerEndYConcavityWidthCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_LowerEndYConcavityWidthCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_LowerEndInclinationCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetLowerEndInclination(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_LowerEndInclinationCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_LowerEndInclinationCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_SectorsCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetSectorsNumber(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_SectorsCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_SectorsCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_LevelsCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetLevelsNumber(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_LevelsCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_LevelsCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_MiddleYRadiusCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetMiddleYRadius(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_MiddleYRadiusCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MiddleYRadiusCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_MiddleXRadiusCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetMiddleXRadius(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_MiddleXRadiusCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MiddleXRadiusCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_HeightCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralBody()->SetHeight(o->value());
m_VertebralSegment->GetVertebralBody()->GeneratePoints();
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_HeightCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_HeightCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_Surface_i(Fl_Menu_*, void*) {
  m_VertebralSegment->GetVertebralBody()->SetDrawingMode( li::Shape3D::triangles );
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_Surface(Fl_Menu_* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Surface_i(o,v);
}

inline void liVertebralSegmentGUI::cb_Lines_i(Fl_Menu_*, void*) {
  m_VertebralSegment->GetVertebralBody()->SetDrawingMode( li::Shape3D::lines );
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_Lines(Fl_Menu_* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Lines_i(o,v);
}

inline void liVertebralSegmentGUI::cb_Points_i(Fl_Menu_*, void*) {
  m_VertebralSegment->GetVertebralBody()->SetDrawingMode( li::Shape3D::points );
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_Points(Fl_Menu_* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Points_i(o,v);
}

inline void liVertebralSegmentGUI::cb_None_i(Fl_Menu_*, void*) {
  m_VertebralSegment->GetVertebralBody()->SetDrawingMode( li::Shape3D::none );
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_None(Fl_Menu_* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_None_i(o,v);
}

Fl_Menu_Item liVertebralSegmentGUI::menu_Display[] = {
 {"Surface", 0,  (Fl_Callback*)liVertebralSegmentGUI::cb_Surface, 0, 0, 0, 0, 14, 0},
 {"Lines", 0,  (Fl_Callback*)liVertebralSegmentGUI::cb_Lines, 0, 0, 0, 0, 14, 0},
 {"Points", 0,  (Fl_Callback*)liVertebralSegmentGUI::cb_Points, 0, 0, 0, 0, 14, 0},
 {"None", 0,  (Fl_Callback*)liVertebralSegmentGUI::cb_None, 0, 0, 0, 0, 14, 0},
 {0},
 {0},
 {0},
 {0}
};

inline void liVertebralSegmentGUI::cb_Color_i(Fl_Button*, void*) {
  li::Shape3D::ColorType color =
              m_VertebralSegment->GetVertebralBody()->GetColor();
double red   = color.GetRed();
double green = color.GetGreen();
double blue  = color.GetBlue();
fl_color_chooser("Vertebral Body Color",red,green,blue);
color.SetRed( red );
color.SetGreen( green );
color.SetBlue( blue );
m_VertebralSegment->GetVertebralBody()->SetColor( color );
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_Color(Fl_Button* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_i(o,v);
}

inline void liVertebralSegmentGUI::cb_VerticalPositionCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralPedicle()->SetVerticalPosition(o->value());
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_VerticalPositionCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_VerticalPositionCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_HorizontalPositionCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralPedicle()->SetHorizontalPosition(o->value());
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_HorizontalPositionCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_HorizontalPositionCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_VerticalAngleCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralPedicle()->SetVerticalAngle(o->value());
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_VerticalAngleCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_VerticalAngleCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_HorizontalAngleCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralPedicle()->SetHorizontalAngle(o->value());
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_HorizontalAngleCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_HorizontalAngleCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_LengthCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralPedicle()->SetLength(o->value());
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_LengthCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_LengthCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_VerticalRadiusCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralPedicle()->SetVerticalRadius(o->value());
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_VerticalRadiusCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_VerticalRadiusCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_HorizontalRadiusCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralPedicle()->SetHorizontalRadius(o->value());
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_HorizontalRadiusCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_HorizontalRadiusCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_Surface1_i(Fl_Menu_*, void*) {
  m_VertebralSegment->GetVertebralPedicle()->SetDrawingMode( li::Shape3D::triangles );
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_Surface1(Fl_Menu_* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Surface1_i(o,v);
}

inline void liVertebralSegmentGUI::cb_Lines1_i(Fl_Menu_*, void*) {
  m_VertebralSegment->GetVertebralPedicle()->SetDrawingMode( li::Shape3D::lines );
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_Lines1(Fl_Menu_* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Lines1_i(o,v);
}

inline void liVertebralSegmentGUI::cb_Points1_i(Fl_Menu_*, void*) {
  m_VertebralSegment->GetVertebralPedicle()->SetDrawingMode( li::Shape3D::points );
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_Points1(Fl_Menu_* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Points1_i(o,v);
}

inline void liVertebralSegmentGUI::cb_None1_i(Fl_Menu_*, void*) {
  m_VertebralSegment->GetVertebralPedicle()->SetDrawingMode( li::Shape3D::none );
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_None1(Fl_Menu_* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_None1_i(o,v);
}

Fl_Menu_Item liVertebralSegmentGUI::menu_Display1[] = {
 {"Surface", 0,  (Fl_Callback*)liVertebralSegmentGUI::cb_Surface1, 0, 0, 0, 0, 14, 0},
 {"Lines", 0,  (Fl_Callback*)liVertebralSegmentGUI::cb_Lines1, 0, 0, 0, 0, 14, 0},
 {"Points", 0,  (Fl_Callback*)liVertebralSegmentGUI::cb_Points1, 0, 0, 0, 0, 14, 0},
 {"None", 0,  (Fl_Callback*)liVertebralSegmentGUI::cb_None1, 0, 0, 0, 0, 14, 0},
 {0},
 {0},
 {0},
 {0}
};

inline void liVertebralSegmentGUI::cb_PedicleSectorsCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralPedicle()->SetNumberOfSectors(o->value());
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_PedicleSectorsCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_PedicleSectorsCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_Color1_i(Fl_Button*, void*) {
  li::Shape3D::ColorType color =
              m_VertebralSegment->GetVertebralPedicle()->GetColor();
double red   = color.GetRed();
double green = color.GetGreen();
double blue  = color.GetBlue();
fl_color_chooser("Vertebral Body Color",red,green,blue);
color.SetRed( red );
color.SetGreen( green );
color.SetBlue( blue );
m_VertebralSegment->GetVertebralPedicle()->SetColor( color );
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_Color1(Fl_Button* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color1_i(o,v);
}

inline void liVertebralSegmentGUI::cb_FrontalPositionCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->GetVertebralPedicle()->SetFrontalPosition(o->value());
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_FrontalPositionCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_FrontalPositionCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_ShiftCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->SetShift(o->value());
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_ShiftCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_ShiftCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_RotationCounter_i(Fl_Counter* o, void*) {
  m_VertebralSegment->SetRotation(o->value());
m_VertebralSegment->InvokeEvent( li::PatientMovedEvent );
}
void liVertebralSegmentGUI::cb_RotationCounter(Fl_Counter* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_RotationCounter_i(o,v);
}

inline void liVertebralSegmentGUI::cb_Show_i(Fl_Button*, void*) {
  m_SampleGenerator.Show();
}
void liVertebralSegmentGUI::cb_Show(Fl_Button* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Show_i(o,v);
}

inline void liVertebralSegmentGUI::cb_Generate_i(Fl_Button*, void*) {
  m_SampleGenerator.GenerateSamples();
}
void liVertebralSegmentGUI::cb_Generate(Fl_Button* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Generate_i(o,v);
}

inline void liVertebralSegmentGUI::cb_Update_i(Fl_Button*, void*) {
  m_SampleGenerator.UpdateParameters();
}
void liVertebralSegmentGUI::cb_Update(Fl_Button* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Update_i(o,v);
}

inline void liVertebralSegmentGUI::cb_Samples_i(Fl_Check_Button* o, void*) {
  m_VertebralSegment->SetSamplesVisible( (o->value())?true:false );
}
void liVertebralSegmentGUI::cb_Samples(Fl_Check_Button* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Samples_i(o,v);
}

inline void liVertebralSegmentGUI::cb_Axis_i(Fl_Check_Button* o, void*) {
  m_VertebralSegment->SetAxisVisible( (o->value())?true:false );
}
void liVertebralSegmentGUI::cb_Axis(Fl_Check_Button* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Axis_i(o,v);
}

inline void liVertebralSegmentGUI::cb_Registration_i(Fl_Button*, void*) {
  m_VolumeRegistrationOptimizerGUI.Show();
}
void liVertebralSegmentGUI::cb_Registration(Fl_Button* o, void* v) {
  ((liVertebralSegmentGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Registration_i(o,v);
}

liVertebralSegmentGUI::liVertebralSegmentGUI() {
  Fl_Window* w;
  m_VertebralSegmentRegistrator = li::VertebralSegmentRegistrator::New();
  { Fl_Window* o = vertebraWindow = new Fl_Window(518, 373, "Vertebra Window");
    w = o;
    o->user_data((void*)(this));
    { Fl_Tabs* o = new Fl_Tabs(10, 55, 505, 315);
      { Fl_Group* o = new Fl_Group(25, 75, 485, 295, "Body");
        { Fl_Group* o = new Fl_Group(194, 100, 134, 215, "Upper");
          o->box(FL_ENGRAVED_BOX);
          { Fl_Counter* o = UpperEndYRadiusCounter = new Fl_Counter(199, 105, 122, 25, "Y Radius");
            o->minimum(5);
            o->maximum(30);
            o->value(15);
            o->callback((Fl_Callback*)cb_UpperEndYRadiusCounter);
          }
          { Fl_Counter* o = UpperEndXRadiusCounter = new Fl_Counter(199, 145, 122, 25, "X Radius");
            o->minimum(5);
            o->maximum(30);
            o->value(15);
            o->callback((Fl_Callback*)cb_UpperEndXRadiusCounter);
          }
          { Fl_Counter* o = UpperEndYConcavityDepthCounter = new Fl_Counter(199, 185, 122, 25, "Conc.Depth");
            o->minimum(0.1);
            o->maximum(30);
            o->step(1);
            o->value(10);
            o->callback((Fl_Callback*)cb_UpperEndYConcavityDepthCounter);
          }
          { Fl_Counter* o = UpperEndYConcavityWidthCounter = new Fl_Counter(199, 225, 122, 25, "Conc.Width");
            o->minimum(0.01);
            o->maximum(2);
            o->step(0.01);
            o->value(0.1);
            o->callback((Fl_Callback*)cb_UpperEndYConcavityWidthCounter);
            o->lstep( 0.1 );
          }
          { Fl_Counter* o = UpperEndInclinationCounter = new Fl_Counter(199, 265, 122, 25, "Inclination");
            o->minimum(-5);
            o->maximum(5);
            o->callback((Fl_Callback*)cb_UpperEndInclinationCounter);
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(50, 100, 136, 215, "Lower");
          o->box(FL_ENGRAVED_BOX);
          { Fl_Counter* o = LowerEndYRadiusCounter = new Fl_Counter(55, 105, 124, 25, "Y Radius");
            o->minimum(5);
            o->maximum(30);
            o->value(15);
            o->callback((Fl_Callback*)cb_LowerEndYRadiusCounter);
          }
          { Fl_Counter* o = LowerEndXRadiusCounter = new Fl_Counter(55, 145, 124, 25, "X Radius");
            o->minimum(5);
            o->maximum(30);
            o->value(15);
            o->callback((Fl_Callback*)cb_LowerEndXRadiusCounter);
          }
          { Fl_Counter* o = LowerEndYConcavityDepthCounter = new Fl_Counter(55, 185, 124, 25, "Conc.Depth");
            o->minimum(0.1);
            o->maximum(30);
            o->step(1);
            o->value(10);
            o->callback((Fl_Callback*)cb_LowerEndYConcavityDepthCounter);
          }
          { Fl_Counter* o = LowerEndYConcavityWidthCounter = new Fl_Counter(55, 225, 124, 25, "Conc.Width");
            o->minimum(0.01);
            o->maximum(2);
            o->step(0.01);
            o->value(0.1);
            o->callback((Fl_Callback*)cb_LowerEndYConcavityWidthCounter);
            o->lstep( 0.1 );
          }
          { Fl_Counter* o = LowerEndInclinationCounter = new Fl_Counter(55, 265, 124, 25, "Inclination");
            o->minimum(-5);
            o->maximum(5);
            o->callback((Fl_Callback*)cb_LowerEndInclinationCounter);
          }
          o->end();
        }
        { Fl_Counter* o = SectorsCounter = new Fl_Counter(410, 285, 75, 25, "Sectors ");
          o->type(1);
          o->minimum(6);
          o->maximum(50);
          o->step(1);
          o->value(6);
          o->callback((Fl_Callback*)cb_SectorsCounter);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Counter* o = LevelsCounter = new Fl_Counter(410, 250, 75, 25, "Levels   ");
          o->type(1);
          o->minimum(5);
          o->maximum(50);
          o->step(1);
          o->value(5);
          o->callback((Fl_Callback*)cb_LevelsCounter);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Group* o = new Fl_Group(350, 100, 135, 90, "Middle");
          o->box(FL_ENGRAVED_BOX);
          { Fl_Counter* o = MiddleYRadiusCounter = new Fl_Counter(355, 105, 120, 25, "Y Radius");
            o->minimum(0.1);
            o->maximum(1);
            o->step(0.01);
            o->value(0.8);
            o->callback((Fl_Callback*)cb_MiddleYRadiusCounter);
            o->lstep( 0.1 );
          }
          { Fl_Counter* o = MiddleXRadiusCounter = new Fl_Counter(355, 145, 125, 25, "X Radius");
            o->minimum(0.1);
            o->maximum(1);
            o->step(0.01);
            o->value(0.7);
            o->callback((Fl_Callback*)cb_MiddleXRadiusCounter);
            o->lstep( 0.1 );
          }
          o->end();
        }
        { Fl_Counter* o = HeightCounter = new Fl_Counter(360, 200, 125, 25, "Height");
          o->minimum(5);
          o->maximum(30);
          o->value(15);
          o->callback((Fl_Callback*)cb_HeightCounter);
        }
        { Fl_Choice* o = new Fl_Choice(402, 323, 85, 25, "Display ");
          o->menu(menu_Display);
        }
        { Fl_Button* o = new Fl_Button(250, 325, 75, 25, "Color");
          o->callback((Fl_Callback*)cb_Color);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(15, 85, 490, 280, "Pedicles");
        o->hide();
        { Fl_Counter* o = VerticalPositionCounter = new Fl_Counter(146, 105, 165, 27, "Vertical   ");
          o->minimum(-20);
          o->maximum(30);
          o->callback((Fl_Callback*)cb_VerticalPositionCounter);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Counter* o = HorizontalPositionCounter = new Fl_Counter(146, 132, 165, 27, "Horizontal ");
          o->minimum(0);
          o->maximum(30);
          o->value(10);
          o->callback((Fl_Callback*)cb_HorizontalPositionCounter);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Counter* o = VerticalAngleCounter = new Fl_Counter(146, 200, 165, 27, "Vert.Angle");
          o->minimum(-40);
          o->maximum(20);
          o->callback((Fl_Callback*)cb_VerticalAngleCounter);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Counter* o = HorizontalAngleCounter = new Fl_Counter(146, 227, 165, 27, "Horz.Angle");
          o->minimum(-20);
          o->maximum(60);
          o->callback((Fl_Callback*)cb_HorizontalAngleCounter);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Counter* o = LengthCounter = new Fl_Counter(146, 263, 165, 27, "Length  ");
          o->minimum(1);
          o->maximum(40);
          o->value(10);
          o->callback((Fl_Callback*)cb_LengthCounter);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Counter* o = VerticalRadiusCounter = new Fl_Counter(146, 290, 165, 27, "Vertical Radius");
          o->minimum(1);
          o->maximum(40);
          o->value(5);
          o->callback((Fl_Callback*)cb_VerticalRadiusCounter);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Counter* o = HorizontalRadiusCounter = new Fl_Counter(146, 317, 165, 27, "Horizontal Radius");
          o->minimum(1);
          o->maximum(40);
          o->value(5);
          o->callback((Fl_Callback*)cb_HorizontalRadiusCounter);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Choice* o = new Fl_Choice(396, 168, 85, 25, "Display ");
          o->menu(menu_Display1);
        }
        { Fl_Counter* o = PedicleSectorsCounter = new Fl_Counter(400, 110, 75, 25, "Sectors ");
          o->type(1);
          o->minimum(6);
          o->maximum(50);
          o->step(1);
          o->value(6);
          o->callback((Fl_Callback*)cb_PedicleSectorsCounter);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = new Fl_Button(400, 215, 75, 25, "Color");
          o->callback((Fl_Callback*)cb_Color1);
        }
        { Fl_Counter* o = FrontalPositionCounter = new Fl_Counter(146, 159, 165, 27, "Frontal ");
          o->minimum(0);
          o->maximum(30);
          o->value(10);
          o->callback((Fl_Callback*)cb_FrontalPositionCounter);
          o->align(FL_ALIGN_LEFT);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(35, 80, 480, 290, "Articulation");
        o->hide();
        { Fl_Counter* o = ShiftCounter = new Fl_Counter(180, 100, 150, 25, "Shift  ");
          o->minimum(0);
          o->maximum(40);
          o->value(30);
          o->callback((Fl_Callback*)cb_ShiftCounter);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Counter* o = RotationCounter = new Fl_Counter(180, 140, 150, 25, "Rotation ");
          o->minimum(-45);
          o->maximum(45);
          o->callback((Fl_Callback*)cb_RotationCounter);
          o->align(FL_ALIGN_LEFT);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(35, 80, 480, 195, "Spinusl Process");
        o->hide();
        o->end();
      }
      { Fl_Group* o = new Fl_Group(35, 80, 480, 195, "Tranverse Process");
        o->hide();
        o->end();
      }
      { Fl_Group* o = new Fl_Group(15, 80, 500, 275, "Samples");
        o->hide();
        { Fl_Button* o = new Fl_Button(155, 135, 180, 35, "Show Sample Generator");
          o->callback((Fl_Callback*)cb_Show);
          o->align(FL_ALIGN_WRAP);
        }
        { Fl_Button* o = new Fl_Button(155, 175, 180, 35, "Generate Samples");
          o->callback((Fl_Callback*)cb_Generate);
          o->align(FL_ALIGN_WRAP);
        }
        { Fl_Button* o = new Fl_Button(155, 215, 180, 35, "Update Parameters");
          o->callback((Fl_Callback*)cb_Update);
          o->align(FL_ALIGN_WRAP);
        }
        { Fl_Check_Button* o = new Fl_Check_Button(170, 265, 155, 30, "  Samples Visible");
          o->box(FL_ENGRAVED_FRAME);
          o->down_box(FL_DIAMOND_DOWN_BOX);
          o->value(1);
          o->selection_color(2);
          o->callback((Fl_Callback*)cb_Samples);
        }
        { Fl_Check_Button* o = new Fl_Check_Button(170, 298, 155, 30, "  Axis Visible");
          o->box(FL_ENGRAVED_FRAME);
          o->down_box(FL_DIAMOND_DOWN_BOX);
          o->value(1);
          o->selection_color(2);
          o->callback((Fl_Callback*)cb_Axis);
        }
        { Fl_Button* o = new Fl_Button(155, 95, 180, 35, "Registration Controls");
          o->callback((Fl_Callback*)cb_Registration);
          o->align(FL_ALIGN_WRAP);
        }
        o->end();
      }
      o->end();
    }
    NameOutput = new Fl_Output(105, 15, 200, 25, "Vertebra ");
    o->end();
  }
}

liVertebralSegmentGUI::~liVertebralSegmentGUI() {
}

void liVertebralSegmentGUI::Show(void) {
  vertebraWindow->show();
}

void liVertebralSegmentGUI::Hide(void) {
  vertebraWindow->hide();
m_SampleGenerator.Hide();
}

void liVertebralSegmentGUI::SetVertebralSegment( li::VertebralSegment * segment ) {
  m_VertebralSegment = segment;
UpperEndYRadiusCounter->value( m_VertebralSegment->GetVertebralBody()->GetUpperEndYRadius());
UpperEndXRadiusCounter->value( m_VertebralSegment->GetVertebralBody()->GetUpperEndXRadius());
UpperEndYConcavityWidthCounter->value( m_VertebralSegment->GetVertebralBody()->GetUpperEndYConcavityWidth());
UpperEndYConcavityDepthCounter->value( m_VertebralSegment->GetVertebralBody()->GetUpperEndYConcavityDepth());
UpperEndInclinationCounter->value( m_VertebralSegment->GetVertebralBody()->GetUpperEndInclination());
LowerEndYRadiusCounter->value( m_VertebralSegment->GetVertebralBody()->GetLowerEndYRadius());
LowerEndXRadiusCounter->value( m_VertebralSegment->GetVertebralBody()->GetLowerEndXRadius());
LowerEndYConcavityWidthCounter->value( m_VertebralSegment->GetVertebralBody()->GetLowerEndYConcavityWidth());
LowerEndYConcavityDepthCounter->value( m_VertebralSegment->GetVertebralBody()->GetLowerEndYConcavityDepth());
LowerEndInclinationCounter->value( m_VertebralSegment->GetVertebralBody()->GetLowerEndInclination());
MiddleXRadiusCounter->value( m_VertebralSegment->GetVertebralBody()->GetMiddleXRadius());
MiddleYRadiusCounter->value( m_VertebralSegment->GetVertebralBody()->GetMiddleYRadius());
HeightCounter->value( m_VertebralSegment->GetVertebralBody()->GetHeight() );
LevelsCounter->value( m_VertebralSegment->GetVertebralBody()->GetLevelsNumber() );
SectorsCounter->value( m_VertebralSegment->GetVertebralBody()->GetSectorsNumber() );
NameOutput->value( m_VertebralSegment->GetName() );
ShiftCounter->value( m_VertebralSegment->GetShift() );
RotationCounter->value( m_VertebralSegment->GetRotation() );
VerticalPositionCounter->value( m_VertebralSegment->GetVertebralPedicle()->GetVerticalPosition() );
HorizontalPositionCounter->value( m_VertebralSegment->GetVertebralPedicle()->GetHorizontalPosition() );
VerticalAngleCounter->value( m_VertebralSegment->GetVertebralPedicle()->GetVerticalAngle() );
HorizontalAngleCounter->value( m_VertebralSegment->GetVertebralPedicle()->GetHorizontalAngle() );
LengthCounter->value( m_VertebralSegment->GetVertebralPedicle()->GetLength() );
PedicleSectorsCounter->value( m_VertebralSegment->GetVertebralPedicle()->GetNumberOfSectors() );
VerticalRadiusCounter->value( m_VertebralSegment->GetVertebralPedicle()->GetVerticalRadius() );
HorizontalRadiusCounter->value( m_VertebralSegment->GetVertebralPedicle()->GetHorizontalRadius() );
m_SampleGenerator.SetVertebralSegment( segment );
m_VolumeRegistrationOptimizerGUI.SetOptimizer( m_VertebralSegmentRegistrator->GetVolumeRegistrator()->GetOptimizer() );
m_VertebralSegmentRegistrator->GetVolumeRegistrator()->SetTarget( m_SampleGenerator.GetPointSet() );
}

void liVertebralSegmentGUI::SetVolume( li::VertebralSegmentRegistrator::VolumeImageType * image ) {
  m_VertebralSegmentRegistrator->GetVolumeRegistrator()->SetReference( image );
}

void liVertebralSegmentGUI::SetImage( li::VertebralSegmentRegistrator::FluoroscopicImageType * image ) {
}
