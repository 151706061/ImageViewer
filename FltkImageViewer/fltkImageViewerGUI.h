// generated by Fast Light User Interface Designer (fluid) version 1.0010

#ifndef fltkImageViewerGUI_h
#define fltkImageViewerGUI_h
#include <FL/Fl.H>
#include <FL/Fl_Window.H>
#include <FL/Fl_Group.H>
#include <GLSliceView.h>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Browser.H>

class fltkImageViewerGUI {
public:
  fltkImageViewerGUI();
  virtual ~fltkImageViewerGUI();
  Fl_Window* createGUI();
  Fl_Window *iviewWindow;
  Fl_Group *glWindowGroup;
  Fl_Choice *orientationChoice;
private:
  inline void cb_orientationChoice_i(Fl_Choice*, void*);
  static void cb_orientationChoice(Fl_Choice*, void*);
  static Fl_Menu_Item menu_orientationChoice[];
  static Fl_Menu_Item menu_[];
  inline void cb_Value_i(Fl_Menu_*, void*);
  static void cb_Value(Fl_Menu_*, void*);
  inline void cb_Log_i(Fl_Menu_*, void*);
  static void cb_Log(Fl_Menu_*, void*);
  inline void cb_MIP_i(Fl_Menu_*, void*);
  static void cb_MIP(Fl_Menu_*, void*);
public:
  Fl_Value_Slider *sliceNumberSlider;
private:
  inline void cb_sliceNumberSlider_i(Fl_Value_Slider*, void*);
  static void cb_sliceNumberSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *intensityWindowingMinSlider;
private:
  inline void cb_intensityWindowingMinSlider_i(Fl_Value_Slider*, void*);
  static void cb_intensityWindowingMinSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *intensityWindowingMaxSlider;
private:
  inline void cb_intensityWindowingMaxSlider_i(Fl_Value_Slider*, void*);
  static void cb_intensityWindowingMaxSlider(Fl_Value_Slider*, void*);
  inline void cb_Zoom_i(Fl_Button*, void*);
  static void cb_Zoom(Fl_Button*, void*);
  inline void cb_Zoom1_i(Fl_Button*, void*);
  static void cb_Zoom1(Fl_Button*, void*);
  inline void cb_U_i(Fl_Button*, void*);
  static void cb_U(Fl_Button*, void*);
  inline void cb_Reset_i(Fl_Button*, void*);
  static void cb_Reset(Fl_Button*, void*);
  inline void cb_R_i(Fl_Button*, void*);
  static void cb_R(Fl_Button*, void*);
  inline void cb_L_i(Fl_Button*, void*);
  static void cb_L(Fl_Button*, void*);
  inline void cb_D_i(Fl_Button*, void*);
  static void cb_D(Fl_Button*, void*);
  inline void cb_Points_i(Fl_Button*, void*);
  static void cb_Points(Fl_Button*, void*);
public:
  Fl_Window *clickedPointsWindow;
  Fl_Browser *clickedPointsBrowser;
private:
  inline void cb_Update_i(Fl_Button*, void*);
  static void cb_Update(Fl_Button*, void*);
  inline void cb_Clear_i(Fl_Button*, void*);
  static void cb_Clear(Fl_Button*, void*);
  inline void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  virtual void CreateGLSliceView( Fl_Group *,Fl_Gl_Window * w );
  virtual void addMenuBarOptions(void);
  virtual void addFilterMenuOptions();
  virtual void addFileMenuOptions();
  virtual void open(void);
  virtual void SetImage( itk::ImageBase<3> * img );
  virtual void show(void);
  virtual void hide(void);
  virtual void update(void);
  virtual void synchronize(void);
  virtual void imageMode(itk::ImageModeType mode);
  virtual void selectSlice(unsigned int);
  virtual void setIntensityWindowingMin(float);
  virtual void setIntensityWindowingMax(float);
  virtual void centerWindow(void);
  virtual void zoomIn(void);
  virtual void zoomOut(void);
  virtual void shiftUp(void);
  virtual void shiftDown(void);
  virtual void shiftLeft(void);
  virtual void shiftRight(void);
  virtual void setOrientation(void);
  virtual void showClickedPointsWindow(void);
  virtual void clearClickedPoints(void);
  virtual void updateClickedPoints(void);
};
#endif
