// generated by Fast Light User Interface Designer (fluid) version 1.0009

#include "fltkDisplayGlWindowGUI.h"

fltkDisplayGlWindowGUI::fltkDisplayGlWindowGUI() {
  Fl_Window* w;
  { Fl_Window* o = parentWindow = new Fl_Window(565, 585);
    w = o;
    o->user_data((void*)(this));
    { fltk::GlWindowInteractive* o = drawWindow = new fltk::GlWindowInteractive(0, 0, 565, 585);
      Fl_Group::current()->resizable(o);
    }
    o->end();
  }
}

void fltkDisplayGlWindowGUI::Show(void) {
  parentWindow->show();
drawWindow->show();
}

void fltkDisplayGlWindowGUI::SetLabel(const char *newlabel) {
  parentWindow->label(newlabel);
}

void fltkDisplayGlWindowGUI::Redraw(void) {
  parentWindow->redraw();
drawWindow->redraw();
}

void fltkDisplayGlWindowGUI::Size(unsigned int nx, unsigned int ny) {
  parentWindow->size(nx,ny);
drawWindow->size(nx,ny);
}

void fltkDisplayGlWindowGUI::Hide(void) {
  parentWindow->hide();
}

void fltkDisplayGlWindowGUI::Update(void) {
  Redraw();
}

int fltkDisplayGlWindowGUI::GetWidth(void) {
  return drawWindow->w();
}

int fltkDisplayGlWindowGUI::GetHeight(void) {
  return drawWindow->h();
}

void fltkDisplayGlWindowGUI::MakeCurrent(void) {
  drawWindow->make_current();
}

int fltkDisplayGlWindowGUI::IsVisible(void) {
  return drawWindow->visible_r();
}

fltk::GlWindow::RedrawCommandType::Pointer fltkDisplayGlWindowGUI::GetRedrawCommand(void) {
  return drawWindow->GetRedrawCommand().GetPointer();
}

itk::Object::Pointer fltkDisplayGlWindowGUI::GetNotifier(void) {
  return drawWindow->GetNotifier();
}
