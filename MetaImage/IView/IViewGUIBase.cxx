// generated by Fast Light User Interface Designer (fluid) version 1.0010

#include "IViewGUIBase.h"

inline void IViewGUIBase::cb_OpenAdd_i(Fl_Menu_*, void*) {
  if (openImageCB != NULL)
	openImageCB();
}
void IViewGUIBase::cb_OpenAdd(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_OpenAdd_i(o,v);
}

inline void IViewGUIBase::cb_AddOverlay_i(Fl_Menu_*, void*) {
  if (openOverlayCB != NULL)
	openOverlayCB();
}
void IViewGUIBase::cb_AddOverlay(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_AddOverlay_i(o,v);
}

inline void IViewGUIBase::cb_Remove_i(Fl_Menu_*, void*) {
  if (removeCB != NULL)
	removeCB();
}
void IViewGUIBase::cb_Remove(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_Remove_i(o,v);
}

inline void IViewGUIBase::cb_Quit_i(Fl_Menu_*, void*) {
  iviewWindow->hide();
}
void IViewGUIBase::cb_Quit(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

inline void IViewGUIBase::cb_Value_i(Fl_Menu_*, void*) {
  sliceView->imageMode(IMG_VAL);
sliceView->update();
}
void IViewGUIBase::cb_Value(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_Value_i(o,v);
}

inline void IViewGUIBase::cb_Log_i(Fl_Menu_*, void*) {
  sliceView->imageMode(IMG_LOG);
sliceView->update();
}
void IViewGUIBase::cb_Log(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_Log_i(o,v);
}

inline void IViewGUIBase::cb_X_i(Fl_Menu_*, void*) {
  sliceView->imageMode(IMG_DX);
sliceView->update();
}
void IViewGUIBase::cb_X(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_X_i(o,v);
}

inline void IViewGUIBase::cb_Y_i(Fl_Menu_*, void*) {
  sliceView->imageMode(IMG_DY);
sliceView->update();
}
void IViewGUIBase::cb_Y(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_Y_i(o,v);
}

inline void IViewGUIBase::cb_Z_i(Fl_Menu_*, void*) {
  sliceView->imageMode(IMG_DZ);
sliceView->update();
}
void IViewGUIBase::cb_Z(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_Z_i(o,v);
}

inline void IViewGUIBase::cb_H_i(Fl_Menu_*, void*) {
  sliceView->imageMode(IMG_H);
sliceView->update();
}
void IViewGUIBase::cb_H(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_H_i(o,v);
}

inline void IViewGUIBase::cb_MIP_i(Fl_Menu_*, void*) {
  sliceView->imageMode(IMG_MIP);
sliceView->update();
}
void IViewGUIBase::cb_MIP(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_MIP_i(o,v);
}

inline void IViewGUIBase::cb_FlipX_i(Fl_Menu_*, void*) {
  sliceView->flipX(!sliceView->flipX());
sliceView->update();
}
void IViewGUIBase::cb_FlipX(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_FlipX_i(o,v);
}

inline void IViewGUIBase::cb_FlipY_i(Fl_Menu_*, void*) {
  sliceView->flipY(!sliceView->flipY());
sliceView->update();
}
void IViewGUIBase::cb_FlipY(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_FlipY_i(o,v);
}

inline void IViewGUIBase::cb_XY_i(Fl_Menu_*, void*) {
  sliceView->orientation(2);
sliceView->update();
}
void IViewGUIBase::cb_XY(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_XY_i(o,v);
}

inline void IViewGUIBase::cb_XZ_i(Fl_Menu_*, void*) {
  sliceView->orientation(1);
sliceView->update();
}
void IViewGUIBase::cb_XZ(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_XZ_i(o,v);
}

inline void IViewGUIBase::cb_YZ_i(Fl_Menu_*, void*) {
  sliceView->orientation(0);
sliceView->update();
}
void IViewGUIBase::cb_YZ(Fl_Menu_* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_YZ_i(o,v);
}

Fl_Menu_Item IViewGUIBase::menu_[] = {
 {"File", 0,  0, 0, 64, 0, 0, 14, 0},
 {"Open/Add", 0x4006f,  (Fl_Callback*)IViewGUIBase::cb_OpenAdd, 0, 17, 0, 0, 14, 0},
 {"Add Overlay", 0,  (Fl_Callback*)IViewGUIBase::cb_AddOverlay, 0, 17, 0, 0, 14, 0},
 {"Remove", 0,  (Fl_Callback*)IViewGUIBase::cb_Remove, 0, 145, 0, 0, 14, 0},
 {"Quit", 0x40071,  (Fl_Callback*)IViewGUIBase::cb_Quit, 0, 0, 0, 0, 14, 0},
 {0},
 {"Filter", 0,  0, 0, 64, 0, 0, 14, 0},
 {"Value", 0,  (Fl_Callback*)IViewGUIBase::cb_Value, 0, 0, 0, 0, 14, 0},
 {"Log", 0,  (Fl_Callback*)IViewGUIBase::cb_Log, 0, 0, 0, 0, 14, 0},
 {"X Deriv", 0,  (Fl_Callback*)IViewGUIBase::cb_X, 0, 0, 0, 0, 14, 0},
 {"Y Deriv", 0,  (Fl_Callback*)IViewGUIBase::cb_Y, 0, 0, 0, 0, 14, 0},
 {"Z Deriv", 0,  (Fl_Callback*)IViewGUIBase::cb_Z, 0, 0, 0, 0, 14, 0},
 {"H", 0,  (Fl_Callback*)IViewGUIBase::cb_H, 0, 0, 0, 0, 14, 0},
 {"MIP", 0,  (Fl_Callback*)IViewGUIBase::cb_MIP, 0, 0, 0, 0, 14, 0},
 {0},
 {"Orientation", 0,  0, 0, 64, 0, 0, 14, 0},
 {"FlipX", 0,  (Fl_Callback*)IViewGUIBase::cb_FlipX, 0, 0, 0, 0, 14, 0},
 {"FlipY", 0,  (Fl_Callback*)IViewGUIBase::cb_FlipY, 0, 128, 0, 0, 14, 0},
 {"XY", 0,  (Fl_Callback*)IViewGUIBase::cb_XY, 0, 0, 0, 0, 14, 0},
 {"XZ", 0,  (Fl_Callback*)IViewGUIBase::cb_XZ, 0, 0, 0, 0, 14, 0},
 {"YZ", 0,  (Fl_Callback*)IViewGUIBase::cb_YZ, 0, 0, 0, 0, 14, 0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0},
 {0}
};
Fl_Menu_Item* IViewGUIBase::OpenAdd = IViewGUIBase::menu_ + 1;
Fl_Menu_Item* IViewGUIBase::AddOverlay = IViewGUIBase::menu_ + 2;
Fl_Menu_Item* IViewGUIBase::Remove = IViewGUIBase::menu_ + 3;

inline void IViewGUIBase::cb_sliceNumberSlider_i(Fl_Value_Slider* o, void*) {
  sliceView->sliceNum((int)o->value());
sliceView->update();
}
void IViewGUIBase::cb_sliceNumberSlider(Fl_Value_Slider* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_sliceNumberSlider_i(o,v);
}

inline void IViewGUIBase::cb_imageNumberSlider_i(Fl_Value_Slider* o, void*) {
  if (imageNumSliderCB != NULL)
	imageNumSliderCB((int) o->value());
}
void IViewGUIBase::cb_imageNumberSlider(Fl_Value_Slider* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_imageNumberSlider_i(o,v);
}

inline void IViewGUIBase::cb_intensityWindowingMinSlider_i(Fl_Value_Slider* o, void*) {
  sliceView->iwMin((float)o->value());
sliceView->update();
}
void IViewGUIBase::cb_intensityWindowingMinSlider(Fl_Value_Slider* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_intensityWindowingMinSlider_i(o,v);
}

inline void IViewGUIBase::cb_intensityWindowingMaxSlider_i(Fl_Value_Slider* o, void*) {
  sliceView->iwMax((float)o->value());
sliceView->update();
}
void IViewGUIBase::cb_intensityWindowingMaxSlider(Fl_Value_Slider* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_intensityWindowingMaxSlider_i(o,v);
}

inline void IViewGUIBase::cb_Zoom_i(Fl_Button*, void*) {
  sliceView->winZoom(sliceView->winZoom()*2.0);
sliceView->update();
}
void IViewGUIBase::cb_Zoom(Fl_Button* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_Zoom_i(o,v);
}

inline void IViewGUIBase::cb_Zoom1_i(Fl_Button*, void*) {
  sliceView->winZoom(sliceView->winZoom()/2.0);
sliceView->update();
}
void IViewGUIBase::cb_Zoom1(Fl_Button* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_Zoom1_i(o,v);
}

inline void IViewGUIBase::cb_U_i(Fl_Button*, void*) {
  sliceView->winShift(1,0);
sliceView->update();
}
void IViewGUIBase::cb_U(Fl_Button* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_U_i(o,v);
}

inline void IViewGUIBase::cb_Reset_i(Fl_Button*, void*) {
  sliceView->winCenter();
sliceView->update();
}
void IViewGUIBase::cb_Reset(Fl_Button* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_Reset_i(o,v);
}

inline void IViewGUIBase::cb_R_i(Fl_Button*, void*) {
  sliceView->winShift(0,1);
sliceView->update();
}
void IViewGUIBase::cb_R(Fl_Button* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_R_i(o,v);
}

inline void IViewGUIBase::cb_L_i(Fl_Button*, void*) {
  sliceView->winShift(0,-1);
sliceView->update();
}
void IViewGUIBase::cb_L(Fl_Button* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_L_i(o,v);
}

inline void IViewGUIBase::cb_D_i(Fl_Button*, void*) {
  sliceView->winShift(-1,0);
sliceView->update();
}
void IViewGUIBase::cb_D(Fl_Button* o, void* v) {
  ((IViewGUIBase*)(o->parent()->user_data()))->cb_D_i(o,v);
}

IViewGUIBase::IViewGUIBase() {
  Fl_Window* w;
  imageNumSliderCB = NULL;
openImageCB = NULL;
openOverlayCB = NULL;
removeCB = NULL;
saveCB = NULL;
  { Fl_Window* o = iviewWindow = new Fl_Window(315, 430, "IView");
    w = o;
    o->labelsize(10);
    o->user_data((void*)(this));
    { GLSliceView<float, unsigned char>* o = sliceView = new GLSliceView<float, unsigned char>(0, 25, 275, 280, "3D Win");
      o->box(FL_EMBOSSED_BOX);
      Fl_Group::current()->resizable(o);
    }
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 275, 25);
      { Fl_Menu_Item* o = &menu_[6];
        addFilterMenuOptions();
      }
      o->menu(menu_);
      addMenuBarOptions();
    }
    { Fl_Value_Slider* o = sliceNumberSlider = new Fl_Value_Slider(290, 25, 20, 280, "Slice");
      o->type(4);
      o->labelsize(10);
      o->step(1);
      o->textsize(9);
      o->callback((Fl_Callback*)cb_sliceNumberSlider);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Value_Slider* o = imageNumberSlider = new Fl_Value_Slider(5, 335, 80, 20, "Image");
      o->type(5);
      o->labelsize(9);
      o->maximum(0);
      o->step(1);
      o->callback((Fl_Callback*)cb_imageNumberSlider);
      o->hide();
      o->deactivate();
    }
    { Fl_Value_Slider* o = intensityWindowingMinSlider = new Fl_Value_Slider(0, 390, 315, 20);
      o->type(3);
      o->selection_color(32);
      o->labeltype(FL_NO_LABEL);
      o->labelsize(9);
      o->step(1);
      o->value(1);
      o->textsize(9);
      o->callback((Fl_Callback*)cb_intensityWindowingMinSlider);
    }
    { Fl_Value_Slider* o = intensityWindowingMaxSlider = new Fl_Value_Slider(0, 410, 315, 20);
      o->type(3);
      o->color(55);
      o->selection_color(47);
      o->labeltype(FL_NO_LABEL);
      o->labelsize(9);
      o->step(1);
      o->value(1);
      o->textsize(9);
      o->callback((Fl_Callback*)cb_intensityWindowingMaxSlider);
    }
    { Fl_Button* o = new Fl_Button(235, 310, 55, 20, "Zoom In");
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Zoom);
    }
    { Fl_Button* o = new Fl_Button(235, 365, 55, 20, "Zoom Out");
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Zoom1);
    }
    { Fl_Button* o = new Fl_Button(180, 310, 35, 35, "U");
      o->box(FL_DIAMOND_UP_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_U);
    }
    { Fl_Button* o = new Fl_Button(245, 335, 35, 25, "Reset");
      o->box(FL_ROUND_UP_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Reset);
    }
    { Fl_Button* o = new Fl_Button(200, 330, 35, 35, "R");
      o->box(FL_DIAMOND_UP_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_R);
    }
    { Fl_Button* o = new Fl_Button(160, 330, 35, 35, "L");
      o->box(FL_DIAMOND_UP_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_L);
    }
    { Fl_Button* o = new Fl_Button(180, 350, 35, 35, "D");
      o->box(FL_DIAMOND_UP_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_D);
    }
    { Fl_Output* o = selectedPointDisplay = new Fl_Output(5, 315, 165, 20);
      o->labelsize(12);
      o->textsize(12);
    }
    o->end();
  }
}

IViewGUIBase::~IViewGUIBase() {
}

void IViewGUIBase::addMenuBarOptions(void) {
}

void IViewGUIBase::addFilterMenuOptions(void) {
}

void IViewGUIBase::addFileMenuOptions(void) {
}

void IViewGUIBase::open(void) {
}

void IViewGUIBase::update(void) {
  sliceView->update();
}

void IViewGUIBase::show(void) {
  iviewWindow->show();
sliceView->show();
sliceView->redraw();
}

void IViewGUIBase::hide(void) {
  iviewWindow->hide();
}

void IViewGUIBase::setImage(const PhysicalImage<float,3>::Pointer img) {
  sliceView->SetInputImage(img);
 float min,max;
 imageMinandMax(img, min, max);

intensityWindowingMinSlider->minimum(min);
intensityWindowingMinSlider->maximum(max);
intensityWindowingMinSlider->step((max-min)/100);
intensityWindowingMinSlider->value(min);
intensityWindowingMaxSlider->minimum(min);
intensityWindowingMaxSlider->maximum(max);
intensityWindowingMaxSlider->step((max-min)/100);
intensityWindowingMaxSlider->value(max);

unsigned long *size = new unsigned long[3];
PhysicalImage<float,3>::RegionType img_region = img->GetLargestPossibleRegion();
PhysicalImage<float,3>::SizeType   img_size   = img_region.GetSize();
size[0] = img_size[0];
size[1] = img_size[1];
size[2] = img_size[2];
sliceNumberSlider->maximum(size[2]);
sliceView->sliceNumCallBack(sliceNumCallBack, (void*)this);
sliceView->iwCallBack(intensityWindowingCallBack, (void*)this);
sliceView->clickSelectCallBack(clickSelectCallBack, (void*)this);
sliceView->orientationCallBack(orientationCallBack, (void*)this);
sliceView->clickMode(CM_SELECT);
sliceView->update();
}

void IViewGUIBase::setImageNumSliderCB(ImageNumSliderCBType CB) {
  imageNumSliderCB = CB;
}

void IViewGUIBase::setOpenImageCB(OpenCBType CB) {
  openImageCB = CB;
}

void IViewGUIBase::setRemoveCB(RemoveCBType CB) {
  removeCB = CB;
}

void IViewGUIBase::setSaveCB(SaveCBType CB) {
  saveCB = CB;
}

void IViewGUIBase::setOverlay(const PhysicalImage<unsigned char,3>::Pointer img) {
  sliceView->SetInputOverlay(img);
sliceView->update();
}

void IViewGUIBase::setOpenOverlayCB(OpenCBType CB) {
  openOverlayCB = CB;
}

void sliceNumCallBack(void *t) {
  ((IViewGUIBase*)t)->sliceNumberSlider->value(((IViewGUIBase*)t)->sliceView->sliceNum());
}

void intensityWindowingCallBack(void *t) {
  ((IViewGUIBase*)t)->intensityWindowingMinSlider->value(((IViewGUIBase*)t)->sliceView->iwMin());
((IViewGUIBase*)t)->intensityWindowingMaxSlider->value(((IViewGUIBase*)t)->sliceView->iwMax());
}

void clickSelectCallBack(float x, float y, float z, float v, void *t) {
  char s[80];
sprintf(s, "%0.1f %0.1f %0.1f = %f", x, y, z, v);
((IViewGUIBase*)t)->selectedPointDisplay->value(s);
}

void orientationCallBack(void *t) {
  unsigned long *size= new unsigned  long[3];
PhysicalImage<float,3>::RegionType InputImage_region = (((IViewGUIBase*)t)->sliceView->GetInputImage())->GetLargestPossibleRegion();
PhysicalImage<float,3>::SizeType   InputImage_size   = InputImage_region.GetSize();
size[0] = InputImage_size[0];
size[1] = InputImage_size[1];
size[2] = InputImage_size[2];

((IViewGUIBase*)t)->sliceNumberSlider->maximum(size[((IViewGUIBase*)t)->sliceView->orientation()]);
((IViewGUIBase*)t)->sliceNumberSlider->value(((IViewGUIBase*)t)->sliceView->sliceNum());
}

void imageMinandMax(PhysicalImage<float,3>::Pointer img, float &min, float &max) {
  float v;
Image<float,3>::RegionType img_region = img->GetLargestPossibleRegion();
itk::ImageRegionIterator<itk::PhysicalImage<float,3> > it(img,img_region);
  it.Begin();

  if(!it.IsAtEnd())
  {
    min = max = it.Get();
  }

  while(!it.IsAtEnd())
  {
    v = it.Get();
    if(v < min)
    {
      min = v;
    }
    else 
    {
      if(v > max)
      {
        max = v;
      }
    }
    ++it;
  }
}
