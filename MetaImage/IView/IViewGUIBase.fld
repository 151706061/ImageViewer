# data file for the Fltk User Interface Designer (fluid)
version 1.00 
header_name {.h} 
code_name {.cpp} 
gridx 5 
gridy 5 
snap 3
class IViewGUIBase {open
} {
  decl {typedef void (*ImageNumSliderCBType)(unsigned short int imageNum);} {public
  }
  decl {typedef void (*OpenCBType)(void);} {public
  }
  decl {typedef void (*RemoveCBType)(void);} {public
  }
  decl {typedef void (*SaveCBType)(void);} {public
  }
  decl {ImageNumSliderCBType imageNumSliderCB;} {}
  decl {OpenCBType openImageCB, openOverlayCB;} {}
  decl {RemoveCBType removeCB;} {}
  decl {SaveCBType saveCB;} {}
  Function {IViewGUIBase()} {open
  } {
    code {imageNumSliderCB = NULL;
openImageCB = NULL;
openOverlayCB = NULL;
removeCB = NULL;
saveCB = NULL;} {}
    Fl_Window iviewWindow {
      label IView open
      xywh {1236 66 315 430} labelsize 10 resizable
      code0 {\#include<itkImageRegionIterator.h>} visible
    } {
      Fl_Box sliceView {
        label {3D Win}
        xywh {0 25 275 280} box EMBOSSED_BOX resizable
        code0 {\#include <DisplayLib/GLSliceView.h>}
        class {GLSliceView<float, unsigned char>}
      }
      Fl_Menu_Bar {} {open selected
        xywh {0 0 275 25}
        code0 {addMenuBarOptions();}
      } {
        submenu {} {
          label File open
          xywh {0 0 100 20}
        } {
          menuitem OpenAdd {
            label {Open/Add}
            callback {if (openImageCB != NULL)
	openImageCB();}
            xywh {0 0 100 20} shortcut 0x4006f hide deactivate
          }
          menuitem AddOverlay {
            label {Add Overlay}
            callback {if (openOverlayCB != NULL)
	openOverlayCB();}
            xywh {10 10 100 20} hide deactivate
          }
          menuitem Remove {
            label Remove
            callback {if (removeCB != NULL)
	removeCB();}
            xywh {5 5 100 20} hide deactivate divider
          }
          menuitem {} {
            label Quit
            callback {iviewWindow->hide();}
            xywh {5 5 100 20} shortcut 0x40071
          }
        }
        submenu {} {
          label Filter
          xywh {0 0 100 20}
          code0 {addFilterMenuOptions();}
        } {
          menuitem {} {
            label Value
            callback {sliceView->imageMode(IMG_VAL);
sliceView->update();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label Log
            callback {sliceView->imageMode(IMG_LOG);
sliceView->update();}
            xywh {10 10 100 20}
          }
          menuitem {} {
            label {X Deriv}
            callback {sliceView->imageMode(IMG_DX);
sliceView->update();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label {Y Deriv}
            callback {sliceView->imageMode(IMG_DY);
sliceView->update();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label {Z Deriv}
            callback {sliceView->imageMode(IMG_DZ);
sliceView->update();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label H
            callback {sliceView->imageMode(IMG_H);
sliceView->update();}
            xywh {10 10 100 20}
          }
          menuitem {} {
            label MIP
            callback {sliceView->imageMode(IMG_MIP);
sliceView->update();}
            xywh {20 20 100 20}
          }
        }
        submenu {} {
          label Orientation open
          xywh {0 0 100 20}
        } {
          menuitem {} {
            label FlipX
            callback {sliceView->flipX(!sliceView->flipX());
sliceView->update();}
            xywh {5 5 100 20}
          }
          menuitem {} {
            label FlipY
            callback {sliceView->flipY(!sliceView->flipY());
sliceView->update();}
            xywh {10 10 100 20} divider
          }
          menuitem {} {
            label XY
            callback {sliceView->orientation(2);
sliceView->update();}
            xywh {5 5 100 20}
          }
          menuitem {} {
            label XZ
            callback {sliceView->orientation(1);
sliceView->update();}
            xywh {15 15 100 20}
          }
          menuitem {} {
            label YZ
            callback {sliceView->orientation(0);
sliceView->update();}
            xywh {25 25 100 20}
          }
        }
      }
      Fl_Value_Slider sliceNumberSlider {
        label Slice
        callback {sliceView->sliceNum((int)o->value());
sliceView->update();}
        xywh {290 25 20 280} type {Vert Knob} labelsize 10 align 1 step 1 textsize 9
      }
      Fl_Value_Slider imageNumberSlider {
        label Image
        callback {if (imageNumSliderCB != NULL)
	imageNumSliderCB((int) o->value());}
        xywh {5 335 80 20} type {Horz Knob} labelsize 9 maximum 0 step 1 hide deactivate
      }
      Fl_Value_Slider intensityWindowingMinSlider {
        callback {sliceView->iwMin((float)o->value());
sliceView->update();}
        xywh {0 390 315 20} type {Horz Fill} selection_color 32 labeltype NO_LABEL labelsize 9 step 1 value 1 textsize 9
      }
      Fl_Value_Slider intensityWindowingMaxSlider {
        callback {sliceView->iwMax((float)o->value());
sliceView->update();}
        xywh {0 410 315 20} type {Horz Fill} color 55 selection_color 47 labeltype NO_LABEL labelsize 9 step 1 value 1 textsize 9
      }
      Fl_Button {} {
        label {Zoom In}
        callback {sliceView->winZoom(sliceView->winZoom()*2.0);
sliceView->update();}
        xywh {235 310 55 20} labelsize 10
      }
      Fl_Button {} {
        label {Zoom Out}
        callback {sliceView->winZoom(sliceView->winZoom()/2.0);
sliceView->update();}
        xywh {235 365 55 20} labelsize 10
      }
      Fl_Button {} {
        label U
        callback {sliceView->winShift(1,0);
sliceView->update();}
        xywh {180 310 35 35} box DIAMOND_UP_BOX labelsize 10
      }
      Fl_Button {} {
        label Reset
        callback {sliceView->winCenter();
sliceView->update();}
        xywh {245 335 35 25} box ROUND_UP_BOX labelsize 10
      }
      Fl_Button {} {
        label R
        callback {sliceView->winShift(0,1);
sliceView->update();}
        xywh {200 330 35 35} box DIAMOND_UP_BOX labelsize 10
      }
      Fl_Button {} {
        label L
        callback {sliceView->winShift(0,-1);
sliceView->update();}
        xywh {160 330 35 35} box DIAMOND_UP_BOX labelsize 10
      }
      Fl_Button {} {
        label D
        callback {sliceView->winShift(-1,0);
sliceView->update();}
        xywh {180 350 35 35} box DIAMOND_UP_BOX labelsize 10
      }
      Fl_Output selectedPointDisplay {
        xywh {5 315 165 20} labelsize 12 textsize 12
      }
    }
  }
  Function {~IViewGUIBase()} {return_type virtual
  } {}
  Function {addMenuBarOptions(void)} {return_type {virtual void}
  } {}
  Function {addFilterMenuOptions(void)} {return_type {virtual void}
  } {}
  Function {addFileMenuOptions(void)} {return_type {virtual void}
  } {}
  Function {open(void)} {return_type {virtual void}
  } {}
  Function {update(void)} {return_type {virtual void}
  } {
    code {sliceView->update();} {}
  }
  Function {show(void)} {return_type {virtual void}
  } {
    code {iviewWindow->show();
sliceView->show();
sliceView->redraw();} {}
  }
  Function {hide(void)} {return_type {virtual void}
  } {
    code {iviewWindow->hide();} {}
  }
  Function {setImage(const PhysicalImage<float,3>::Pointer img)} {return_type {virtual void}
  } {
    code {sliceView->SetInputImage(img);
 float min,max;
 imageMinandMax(img, min, max);

intensityWindowingMinSlider->minimum(min);
intensityWindowingMinSlider->maximum(max);
intensityWindowingMinSlider->step((max-min)/100);
intensityWindowingMinSlider->value(min);
intensityWindowingMaxSlider->minimum(min);
intensityWindowingMaxSlider->maximum(max);
intensityWindowingMaxSlider->step((max-min)/100);
intensityWindowingMaxSlider->value(max);

unsigned long *size = new unsigned long[3];
PhysicalImage<float,3>::RegionType img_region = img->GetLargestPossibleRegion();
PhysicalImage<float,3>::SizeType   img_size   = img_region.GetSize();
size[0] = img_size[0];
size[1] = img_size[1];
size[2] = img_size[2];
sliceNumberSlider->maximum(size[2]);
sliceView->sliceNumCallBack(sliceNumCallBack, (void*)this);
sliceView->iwCallBack(intensityWindowingCallBack, (void*)this);
sliceView->clickSelectCallBack(clickSelectCallBack, (void*)this);
sliceView->orientationCallBack(orientationCallBack, (void*)this);
sliceView->clickMode(CM_SELECT);
sliceView->update();} {}
  }
  Function {setImageNumSliderCB(ImageNumSliderCBType CB)} {return_type void
  } {
    code {imageNumSliderCB = CB;} {}
  }
  Function {setOpenImageCB(OpenCBType CB)} {return_type void
  } {
    code {openImageCB = CB;} {}
  }
  Function {setRemoveCB(RemoveCBType CB)} {return_type void
  } {
    code {removeCB = CB;} {}
  }
  Function {setSaveCB(SaveCBType CB)} {return_type void
  } {
    code {saveCB = CB;} {}
  }
  Function {setOverlay(const PhysicalImage<unsigned char,3>::Pointer img)} {return_type void
  } {
    code {sliceView->SetInputOverlay(img);
sliceView->update();} {}
  }
  Function {setOpenOverlayCB(OpenCBType CB)} {return_type void
  } {
    code {openOverlayCB = CB;} {}
  }
} 

Function {sliceNumCallBack(void *t)} {return_type void
} {
  code {((IViewGUIBase*)t)->sliceNumberSlider->value(((IViewGUIBase*)t)->sliceView->sliceNum());} {}
} 

Function {intensityWindowingCallBack(void *t)} {return_type {virtual void}
} {
  code {((IViewGUIBase*)t)->intensityWindowingMinSlider->value(((IViewGUIBase*)t)->sliceView->iwMin());
((IViewGUIBase*)t)->intensityWindowingMaxSlider->value(((IViewGUIBase*)t)->sliceView->iwMax());} {}
} 

Function {clickSelectCallBack(float x, float y, float z, float v, void *t)} {return_type {virtual void}
} {
  code {char s[80];
sprintf(s, "%0.1f %0.1f %0.1f = %f", x, y, z, v);
((IViewGUIBase*)t)->selectedPointDisplay->value(s);} {}
} 

Function {orientationCallBack(void *t)} {open return_type {virtual void}
} {
  code {unsigned long *size= new unsigned  long[3];
PhysicalImage<float,3>::RegionType InputImage_region = (((IViewGUIBase*)t)->sliceView->GetInputImage())->GetLargestPossibleRegion();
PhysicalImage<float,3>::SizeType   InputImage_size   = InputImage_region.GetSize();
size[0] = InputImage_size[0];
size[1] = InputImage_size[1];
size[2] = InputImage_size[2];

((IViewGUIBase*)t)->sliceNumberSlider->maximum(size[((IViewGUIBase*)t)->sliceView->orientation()]);
((IViewGUIBase*)t)->sliceNumberSlider->value(((IViewGUIBase*)t)->sliceView->sliceNum());} {}
} 

Function {imageMinandMax(PhysicalImage<float,3>::Pointer img, float &min, float &max)} {return_type void
} {
  code {float v;
Image<float,3>::RegionType img_region = img->GetLargestPossibleRegion();
  ImageRegionIterator<float,3> it(img,img_region);
  it.Begin();

  if(!it.IsAtEnd())
    min = max = *it;

  while(!it.IsAtEnd())
  {
    v = *it;
    if(v < min)
      min = v;
    else if(v > max)
      max = v;
    ++it;
  }} {}
} 
