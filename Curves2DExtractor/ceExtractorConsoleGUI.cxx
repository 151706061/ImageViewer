// generated by Fast Light User Interface Designer (fluid) version 1.0009

#include "ceExtractorConsoleGUI.h"

inline void ceExtractorConsoleGUI::cb_inputButton_i(fltk::LightButton*, void*) {
  ShowInput();
}
void ceExtractorConsoleGUI::cb_inputButton(fltk::LightButton* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->parent()->user_data()))->cb_inputButton_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_H1xButton_i(fltk::LightButton*, void*) {
  ShowFilteredX();
}
void ceExtractorConsoleGUI::cb_H1xButton(fltk::LightButton* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->parent()->user_data()))->cb_H1xButton_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_Sigma_i(Fl_Counter* o, void*) {
  SetSigma( o->value() );
}
void ceExtractorConsoleGUI::cb_Sigma(Fl_Counter* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->parent()->user_data()))->cb_Sigma_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_H1yButton_i(fltk::LightButton*, void*) {
  ShowFilteredY();
}
void ceExtractorConsoleGUI::cb_H1yButton(fltk::LightButton* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->parent()->user_data()))->cb_H1yButton_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_H2xButton_i(fltk::LightButton*, void*) {
  ShowSecondDerivativeX();
}
void ceExtractorConsoleGUI::cb_H2xButton(fltk::LightButton* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->parent()->user_data()))->cb_H2xButton_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_H2yButton_i(fltk::LightButton*, void*) {
  ShowSecondDerivativeY();
}
void ceExtractorConsoleGUI::cb_H2yButton(fltk::LightButton* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->parent()->user_data()))->cb_H2yButton_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_laplacianButton_i(fltk::LightButton*, void*) {
  ShowLaplacian();
}
void ceExtractorConsoleGUI::cb_laplacianButton(fltk::LightButton* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->parent()->user_data()))->cb_laplacianButton_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_modulusButton_i(fltk::LightButton*, void*) {
  ShowGradientModulus();
}
void ceExtractorConsoleGUI::cb_modulusButton(fltk::LightButton* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->parent()->user_data()))->cb_modulusButton_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_HxyButton_i(fltk::LightButton*, void*) {
  ShowSmoothed();
}
void ceExtractorConsoleGUI::cb_HxyButton(fltk::LightButton* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->parent()->user_data()))->cb_HxyButton_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_H1xyButton_i(fltk::LightButton*, void*) {
  ShowCrossDerivativeXY();
}
void ceExtractorConsoleGUI::cb_H1xyButton(fltk::LightButton* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->parent()->user_data()))->cb_H1xyButton_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_maxEigenValueButton_i(fltk::LightButton*, void*) {
  ShowMaxEigenValue();
}
void ceExtractorConsoleGUI::cb_maxEigenValueButton(fltk::LightButton* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->parent()->user_data()))->cb_maxEigenValueButton_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_minEigenValueButton_i(fltk::LightButton*, void*) {
  ShowMinEigenValue();
}
void ceExtractorConsoleGUI::cb_minEigenValueButton(fltk::LightButton* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->parent()->user_data()))->cb_minEigenValueButton_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_maxEigenVectorButton_i(fltk::LightButton*, void*) {
  ShowMaxEigenVector();
}
void ceExtractorConsoleGUI::cb_maxEigenVectorButton(fltk::LightButton* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->parent()->user_data()))->cb_maxEigenVectorButton_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_loadButton_i(fltk::LightButton*, void*) {
  Load();
}
void ceExtractorConsoleGUI::cb_loadButton(fltk::LightButton* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->user_data()))->cb_loadButton_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_Quit_i(Fl_Button*, void*) {
  Quit();
}
void ceExtractorConsoleGUI::cb_Quit(Fl_Button* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

inline void ceExtractorConsoleGUI::cb_Execute_i(Fl_Button*, void*) {
  Execute();
}
void ceExtractorConsoleGUI::cb_Execute(Fl_Button* o, void* v) {
  ((ceExtractorConsoleGUI*)(o->parent()->user_data()))->cb_Execute_i(o,v);
}

ceExtractorConsoleGUI::ceExtractorConsoleGUI() {
  Fl_Window* w;
  { Fl_Window* o = consoleWindow = new Fl_Window(837, 391, "Gaussian Filter Console");
    w = o;
    o->user_data((void*)(this));
    { Fl_Group* o = Connectors = new Fl_Group(5, 5, 825, 255);
      { Fl_Box* o = new Fl_Box(445, 167, 56, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(416, 103, 51, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(117, 100, 45, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(117, 145, 45, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(72, 125, 45, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(221, 100, 45, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(221, 145, 45, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(112, 100, 10, 55);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(415, 90, 10, 35);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(380, 90, 45, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(380, 115, 45, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(410, 155, 10, 55);
        o->box(FL_UP_BOX);
        o->color(221);
      }
      { Fl_Box* o = new Fl_Box(445, 155, 10, 35);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(425, 184, 10, 39);
        o->box(FL_UP_BOX);
        o->color(221);
      }
      { Fl_Box* o = new Fl_Box(380, 155, 75, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(380, 180, 75, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(260, 46, 55, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(260, 90, 55, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(260, 180, 53, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(260, 227, 53, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(260, 113, 55, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(265, 156, 50, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(260, 45, 10, 192);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(60, 60, 10, 65);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(410, 200, 90, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(425, 214, 75, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(375, 228, 125, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(585, 173, 45, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(585, 203, 45, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(585, 233, 45, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(585, 174, 10, 68);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      { Fl_Box* o = new Fl_Box(550, 215, 45, 10);
        o->box(FL_UP_BOX);
        o->color(4);
      }
      o->end();
    }
    { Fl_Group* o = controlsGroup = new Fl_Group(5, 5, 825, 255);
      o->box(FL_DOWN_FRAME);
      o->deactivate();
      { fltk::LightButton* o = inputButton = new fltk::LightButton(27, 116, 69, 30, "Input");
        o->type(0);
        o->value(1);
        o->selection_color(1);
        o->callback((Fl_Callback*)cb_inputButton);
      }
      { fltk::LightButton* o = H1xButton = new fltk::LightButton(295, 85, 100, 24, "Gradient X");
        o->type(0);
        o->value(1);
        o->selection_color(1);
        o->callback((Fl_Callback*)cb_H1xButton);
      }
      { Fl_Counter* o = new Fl_Counter(30, 190, 160, 25, "Sigma");
        o->minimum(-100);
        o->maximum(100);
        o->value(1);
        o->callback((Fl_Callback*)cb_Sigma);
        o->align(FL_ALIGN_TOP);
      }
      { fltk::LightButton* o = H1yButton = new fltk::LightButton(295, 109, 100, 24, "Gradient Y");
        o->type(0);
        o->value(1);
        o->selection_color(1);
        o->callback((Fl_Callback*)cb_H1yButton);
      }
      { fltk::LightButton* o = H2xButton = new fltk::LightButton(295, 149, 101, 24, "Second X");
        o->type(0);
        o->value(1);
        o->selection_color(1);
        o->callback((Fl_Callback*)cb_H2xButton);
      }
      { fltk::LightButton* o = H2yButton = new fltk::LightButton(295, 173, 101, 25, "Second Y");
        o->type(0);
        o->value(1);
        o->selection_color(1);
        o->callback((Fl_Callback*)cb_H2yButton);
      }
      { fltk::LightButton* o = laplacianButton = new fltk::LightButton(475, 159, 89, 25, "Laplacian");
        o->type(0);
        o->value(1);
        o->selection_color(1);
        o->callback((Fl_Callback*)cb_laplacianButton);
      }
      { fltk::LightButton* o = modulusButton = new fltk::LightButton(445, 96, 85, 25, "Modulus");
        o->type(0);
        o->value(1);
        o->selection_color(1);
        o->callback((Fl_Callback*)cb_modulusButton);
      }
      { fltk::LightButton* o = HxButton = new fltk::LightButton(139, 93, 90, 24, "Smooth X");
        o->type(0);
        o->value(1);
        o->selection_color(1);
      }
      { fltk::LightButton* o = HyButton = new fltk::LightButton(139, 136, 90, 24, "Smooth Y");
        o->type(0);
        o->value(1);
        o->selection_color(1);
      }
      { fltk::LightButton* o = HxyButton = new fltk::LightButton(295, 36, 98, 24, "Smooth XY");
        o->type(0);
        o->value(1);
        o->selection_color(1);
        o->callback((Fl_Callback*)cb_HxyButton);
      }
      { fltk::LightButton* o = H1xyButton = new fltk::LightButton(295, 220, 101, 25, "Cross XY");
        o->type(0);
        o->value(1);
        o->selection_color(1);
        o->callback((Fl_Callback*)cb_H1xyButton);
      }
      { fltk::LightButton* o = maxEigenValueButton = new fltk::LightButton(610, 165, 142, 25, "Max Eigen Value");
        o->type(0);
        o->value(1);
        o->selection_color(1);
        o->callback((Fl_Callback*)cb_maxEigenValueButton);
      }
      { fltk::LightButton* o = minEigenValueButton = new fltk::LightButton(610, 195, 142, 25, "Min Eigen Value");
        o->type(0);
        o->value(1);
        o->selection_color(1);
        o->callback((Fl_Callback*)cb_minEigenValueButton);
      }
      { Fl_Button* o = new Fl_Button(470, 190, 105, 55, "Eigen Value Computation");
        o->box(FL_ROUND_UP_BOX);
        o->align(FL_ALIGN_WRAP);
      }
      { fltk::LightButton* o = maxEigenVectorButton = new fltk::LightButton(610, 225, 142, 25, "Max Eigen Vector");
        o->type(0);
        o->value(1);
        o->selection_color(1);
        o->callback((Fl_Callback*)cb_maxEigenVectorButton);
      }
      o->end();
    }
    { fltk::ProgressBar* o = progressSlider = new fltk::ProgressBar(5, 324, 825, 15);
      o->type(3);
      o->selection_color(2);
    }
    statusTextOutput = new Fl_Output(5, 349, 825, 25);
    { fltk::LightButton* o = loadButton = new fltk::LightButton(30, 45, 69, 30, "Load");
      o->type(0);
      o->value(1);
      o->selection_color(1);
      o->callback((Fl_Callback*)cb_loadButton);
    }
    { Fl_Button* o = new Fl_Button(125, 280, 80, 30, "Quit");
      o->box(FL_ROUND_UP_BOX);
      o->callback((Fl_Callback*)cb_Quit);
    }
    { Fl_Button* o = new Fl_Button(25, 280, 80, 30, "Execute");
      o->box(FL_ROUND_UP_BOX);
      o->callback((Fl_Callback*)cb_Execute);
    }
    o->end();
  }
}

ceExtractorConsoleGUI::~ceExtractorConsoleGUI() {
}

void ceExtractorConsoleGUI::Quit( void ) {
}

void ceExtractorConsoleGUI::Load( void ) {
}

void ceExtractorConsoleGUI::ShowInput( void ) {
}

void ceExtractorConsoleGUI::ShowFilteredX( void ) {
}

void ceExtractorConsoleGUI::ShowFilteredY( void ) {
}

void ceExtractorConsoleGUI::ShowSecondDerivativeX( void ) {
}

void ceExtractorConsoleGUI::ShowSecondDerivativeY( void ) {
}

void ceExtractorConsoleGUI::ShowLaplacian( void ) {
}

void ceExtractorConsoleGUI::ShowGradientModulus( void ) {
}

void ceExtractorConsoleGUI::ShowCrossDerivativeXY( void ) {
}

void ceExtractorConsoleGUI::ShowSmoothed( void ) {
}

void ceExtractorConsoleGUI::ShowMaxEigenValue( void ) {
}

void ceExtractorConsoleGUI::ShowMinEigenValue( void ) {
}

void ceExtractorConsoleGUI::ShowMaxEigenVector( void ) {
}
