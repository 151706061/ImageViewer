// generated by Fast Light User Interface Designer (fluid) version 1.0010

#ifndef liImageRegistrationConsoleGUI_h
#define liImageRegistrationConsoleGUI_h
#include <FL/Fl.H>
#include <FL/Fl_Window.H>
#include <liImageRegistrationConsoleBase.h>
#include <fltkLightButton.h>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Choice.H>
#include <fltkProgressBar.h>
#include <FL/Fl_Output.H>

class liImageRegistrationConsoleGUI : public liImageRegistrationConsoleBase {
public:
  liImageRegistrationConsoleGUI();
  Fl_Window *consoleWindow;
  static Fl_Menu_Item menu_[];
private:
  inline void cb_Load_i(Fl_Menu_*, void*);
  static void cb_Load(Fl_Menu_*, void*);
  inline void cb_Quit_i(Fl_Menu_*, void*);
  static void cb_Quit(Fl_Menu_*, void*);
  inline void cb_About_i(Fl_Menu_*, void*);
  static void cb_About(Fl_Menu_*, void*);
public:
  Fl_Group *Connectors;
  Fl_Group *controlsGroup;
  fltk::LightButton *targetButton;
private:
  inline void cb_targetButton_i(fltk::LightButton*, void*);
  static void cb_targetButton(fltk::LightButton*, void*);
  inline void cb_Start_i(Fl_Button*, void*);
  static void cb_Start(Fl_Button*, void*);
public:
  fltk::LightButton *referenceButton;
private:
  inline void cb_referenceButton_i(fltk::LightButton*, void*);
  static void cb_referenceButton(fltk::LightButton*, void*);
  inline void cb_Apply_i(Fl_Button*, void*);
  static void cb_Apply(Fl_Button*, void*);
public:
  fltk::LightButton *registrationMethodButton;
private:
  inline void cb_Estimated_i(Fl_Button*, void*);
  static void cb_Estimated(Fl_Button*, void*);
public:
  fltk::LightButton *mappedReferenceButton;
private:
  inline void cb_mappedReferenceButton_i(fltk::LightButton*, void*);
  static void cb_mappedReferenceButton(fltk::LightButton*, void*);
public:
  Fl_Group *rotationParameters;
  Fl_Value_Input *xRotation;
  Fl_Value_Input *yRotation;
  Fl_Value_Input *zRotation;
  Fl_Value_Input *angleRotation;
  Fl_Group *translationParameters;
  Fl_Value_Input *xTranslation;
  Fl_Value_Input *yTranslation;
  Fl_Value_Input *zTranslation;
  static Fl_Menu_Item menu_1[];
private:
  inline void cb_Mean_i(Fl_Menu_*, void*);
  static void cb_Mean(Fl_Menu_*, void*);
  inline void cb_Normalized_i(Fl_Menu_*, void*);
  static void cb_Normalized(Fl_Menu_*, void*);
  inline void cb_Pattern_i(Fl_Menu_*, void*);
  static void cb_Pattern(Fl_Menu_*, void*);
  inline void cb_Mutual_i(Fl_Menu_*, void*);
  static void cb_Mutual(Fl_Menu_*, void*);
  inline void cb_Stop_i(Fl_Button*, void*);
  static void cb_Stop(Fl_Button*, void*);
public:
  fltk::ProgressBar *progressSlider;
  Fl_Output *statusTextOutput;
  Fl_Window *aboutWindow;
private:
  inline void cb_Documentation_i(Fl_Button*, void*);
  static void cb_Documentation(Fl_Button*, void*);
public:
  virtual ~liImageRegistrationConsoleGUI();
  virtual void Quit( void );
  virtual void Load( void );
  virtual void ShowTarget( void );
  virtual void ShowReference( void );
  virtual void ShowAbout( void );
  virtual void ShowMappedReference( void );
};
#endif
