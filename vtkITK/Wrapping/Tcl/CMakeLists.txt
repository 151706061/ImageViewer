# create the vtkITK executable
ADD_EXECUTABLE(vtkITK tkAppInit)

TARGET_LINK_LIBRARIES(vtkITK 
  vtkImagingTCL
  vtkGraphicsTCL
  vtkIOTCL
  vtkFilteringTCL 
  vtkCommonTCL  
  vtkIO
  vtkjpeg
  vtkpng
  vtkzlib
  vtktiff
  vtkGraphics
  vtkImaging
  vtkFiltering 
  vtkCommon 
)

#  vtktiff

IF (TCL_LIBRARY)
  TARGET_LINK_LIBRARIES(vtkITK ${TCL_LIBRARY})
ELSE (TCL_LIBRARY)
  MESSAGE("VTK_WRAP_TCL is ON, but the Tcl library was not found.  Please set TCL_LIBRARY." "Error")
ENDIF (TCL_LIBRARY)


IF (VTK_USE_RENDERING)
  # add in opengl
  IF (WIN32)
    TARGET_LINK_LIBRARIES(vtkITK  ${OPENGL_LIBRARY} )
  ELSE (WIN32)
    IF (OPENGL_LIBRARY)
      TARGET_LINK_LIBRARIES(vtkITK ${OPENGL_LIBRARY})
    ENDIF (OPENGL_LIBRARY)
  ENDIF (WIN32)
  IF (VTK_MANGLE_MESA)
    TARGET_LINK_LIBRARIES(vtkITK  ${MESA_LIBRARY})
    IF ( MESA_OS_LIBRARY )
      TARGET_LINK_LIBRARIES(vtkITK ${MESA_OS_LIBRARY})
    ENDIF ( MESA_OS_LIBRARY )
  ELSE (VTK_MANGLE_MESA)
    IF (MESA_OS_LIBRARY AND VTK_OPENGL_HAS_OSMESA)
      TARGET_LINK_LIBRARIES(vtkITK ${MESA_OS_LIBRARY})
    ENDIF (MESA_OS_LIBRARY AND VTK_OPENGL_HAS_OSMESA)
  ENDIF (VTK_MANGLE_MESA)

  # add in the Tk values if found
  IF (TK_INCLUDE_PATH)
    INCLUDE_DIRECTORIES(${TK_INCLUDE_PATH})
  ENDIF (TK_INCLUDE_PATH)
  IF (TK_XLIB_PATH)
    INCLUDE_DIRECTORIES(${TK_XLIB_PATH})
  ENDIF (TK_XLIB_PATH)
  IF (TK_LIBRARY)
    TARGET_LINK_LIBRARIES(vtkITK ${TK_LIBRARY})
  ELSE (TK_LIBRARY)
    MESSAGE("VTK_WRAP_TCL and VTK_USE_RENDERING are ON, but the Tk library was not found.  Please set TK_LIBRARY." "Error")
  ENDIF (TK_LIBRARY)

  # add in xwindows stuff
  IF (CMAKE_HAS_X)
    TARGET_LINK_LIBRARIES(vtkITK -lXt)
    TARGET_LINK_LIBRARIES(vtkITK ${CMAKE_X_LIBS})
    ADD_DEFINITIONS(${CMAKE_X_CFLAGS})
  ENDIF (CMAKE_HAS_X)

  TARGET_LINK_LIBRARIES(vtkITK vtkRenderingTCL vtkRendering)
ENDIF (VTK_USE_RENDERING)

IF (VTK_USE_PATENTED)
  TARGET_LINK_LIBRARIES(vtkITK vtkPatentedTCL vtkPatented)
ENDIF (VTK_USE_PATENTED)

IF (VTK_USE_HYBRID)
  TARGET_LINK_LIBRARIES(vtkITK vtkHybridTCL vtkHybrid)
  IF (WIN32)
    IF (VTK_USE_VIDEO_FOR_WINDOWS)
      TARGET_LINK_LIBRARIES(vtkITK vfw32)
    ENDIF (VTK_USE_VIDEO_FOR_WINDOWS)
    IF (VTK_USE_MATROX_IMAGING)
      TARGET_LINK_LIBRARIES(vtkITK ${MIL_LIBRARY})
    ENDIF (VTK_USE_MATROX_IMAGING)
  ENDIF (WIN32)
ENDIF (VTK_USE_HYBRID)

IF (VTK_USE_PARALLEL)
  TARGET_LINK_LIBRARIES(vtkITK vtkParallelTCL vtkParallel)

  IF (WIN32)
    TARGET_LINK_LIBRARIES(vtkITK  wsock32 )
  ENDIF (WIN32)

  IF (VTK_USE_MPI)
    INCLUDE (${CMAKE_ROOT}/Modules/FindMPI.cmake)
    IF (MPI_LIBRARY)
      TARGET_LINK_LIBRARIES(vtkITK ${MPI_LIBRARY})
    ENDIF (MPI_LIBRARY)
  ENDIF (VTK_USE_MPI)
ENDIF (VTK_USE_PARALLEL)

TARGET_LINK_LIBRARIES(vtkITK vtkVTKITKCommonTCL vtkVTKITKCommon ITKNumerics)

LINK_DIRECTORIES ( ${ITK_BINARY_DIR}/Examples/vtkITK/Common )


#
# link in the PNG library if it was found
#
TARGET_LINK_LIBRARIES(vtkITK vtkpng vtkzlib vtkjpeg vtktiff)

INSTALL_TARGETS(/bin vtkITK)

